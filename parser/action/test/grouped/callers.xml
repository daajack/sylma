<?xml version="1.0" encoding="utf-8"?>
<tst:tests xmlns:tst="http://www.sylma.org/parser/action/test/grouped" xmlns="http://www.sylma.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:le="http://www.sylma.org/parser/action" xmlns:li="http://www.sylma.org/parser/caller" xmlns:lm="http://www.sylma.org/parser/action/basic">
  <tst:description>Callers</tst:description>
  <tst:test name="Load file with short-call">
    <le:action>
      <le:settings>
        <le:return format="dom"/>
      </le:settings>
      <lm:file path="samples/simple.txt"/>
    </le:action>
    <tst:node>
      <file xmlns="http://www.sylma.org/storage/fs">
        <path>/sylma/parser/action/test/grouped/samples/simple.txt</path>
        <action-path>/sylma/parser/action/test/grouped/samples/simple</action-path>
        <name>simple.txt</name>
        <simple-name>simple</simple-name>
        <owner>root</owner>
        <group>0</group>
        <mode>700</mode>
        <read>true</read>
        <write>true</write>
        <execution>true</execution>
        <size>1</size>
        <extension>txt</extension>
      </file>
    </tst:node>
    <tst:expected>
      $result = $controler->getResult('dom');
      $node = $controler->getArgument('node');
//echo $result->asString();
      return
        $controler->compareNodes($result, $node);
    </tst:expected>
  </tst:test>
  <tst:test name="Load file with short-call and multiple arguments" disabled="true">
    <le:action>
      <le:settings>
        <le:bool value="true" le:set-variable="bool"/>
      </le:settings>
      <lm:directory path="samples" debug="[$bool]"/>
    </le:action>
    <tst:expected>
      $result = $controler->getResult('dom');

      return
        $result instanceof \sylma\dom\handler &amp;&amp;
        $result->getRoot() &amp;&amp;
        $result->getRoot()->getName() == 'file';
    </tst:expected>
  </tst:test>
  <tst:test name="Load file with self-call">
    <le:action>
      <le:settings>
        <le:return format="dom"/>
      </le:settings>
      <le:call-self name="get-file">samples/simple.txt</le:call-self>
    </le:action>
    <tst:node>
      <file xmlns="http://www.sylma.org/storage/fs">
        <path>/sylma/parser/action/test/grouped/samples/simple.txt</path>
        <action-path>/sylma/parser/action/test/grouped/samples/simple</action-path>
        <name>simple.txt</name>
        <simple-name>simple</simple-name>
        <owner>root</owner>
        <group>0</group>
        <mode>700</mode>
        <read>true</read>
        <write>true</write>
        <execution>true</execution>
        <size>1</size>
        <extension>txt</extension>
      </file>
    </tst:node>
    <tst:expected>
      $result = $controler->getResult('dom');
      $node = $controler->getArgument('node');

      return
        $controler->compareNodes($result, $node);
    </tst:expected>
  </tst:test>
  <tst:test name="Load file with self-call and li:argument">
    <le:action>
      <le:settings>
        <le:return format="dom"/>
      </le:settings>
      <le:call-self name="get-file">
        <le:string>samples/simple.txt</le:string>
      </le:call-self>
    </le:action>
    <tst:node>
      <file xmlns="http://www.sylma.org/storage/fs">
        <path>/sylma/parser/action/test/grouped/samples/simple.txt</path>
        <action-path>/sylma/parser/action/test/grouped/samples/simple</action-path>
        <name>simple.txt</name>
        <simple-name>simple</simple-name>
        <owner>root</owner>
        <group>0</group>
        <mode>700</mode>
        <read>true</read>
        <write>true</write>
        <execution>true</execution>
        <size>1</size>
        <extension>txt</extension>
      </file>
    </tst:node>
    <tst:expected>
      $result = $controler->getResult('dom');
      $node = $controler->getArgument('node');

      return
        $controler->compareNodes($result, $node);
    </tst:expected>
  </tst:test>
  <tst:test name="Load file with self-call and multiple arguments">
    <le:action>
      <div>
        <le:call-self name="get-file">
          <le:string>samples/nofile.txt</le:string>
          <le:bool value="false"/>
        </le:call-self>
      </div>
    </le:action>
    <tst:node>
      <div xmlns="http://www.sylma.org"/>
    </tst:node>
    <tst:expected>
      $result = $controler->getResult('dom');
      $node = $controler->getArgument('node');

      return
        $controler->compareNodes($result, $node);
    </tst:expected>
  </tst:test>
  <tst:test name="Read a file with short-call called">
    <le:action>
      <div>
        <lm:file path="samples/simple.txt">
          <le:call name="read"/>
        </lm:file>
      </div>
    </le:action>
    <tst:node>
      <div xmlns="http://www.sylma.org">123</div>
    </tst:node>
    <tst:expected>
      $result = $controler->getResult('dom');
      $node = $controler->getArgument('node');

      return
        $controler->compareNodes($result, $node);
    </tst:expected>
  </tst:test>
  <tst:test name="Short call with defined return">
    <le:action>
      <div>
        <lm:manager name="action" return="\sylma\parser\action\Manager">
          <le:call name="validateNumeric">
            <le:numeric>3</le:numeric>
          </le:call>
        </lm:manager>
      </div>
    </le:action>
    <tst:node>
      <div xmlns="http://www.sylma.org">3</div>
    </tst:node>
    <tst:expected>
      $result = $controler->getResult('dom');
      $node = $controler->getArgument('node');

      return
        $controler->compareNodes($result, $node);
    </tst:expected>
  </tst:test>
  <tst:test name="Load a directory with ext-call">
    <le:action>
      <le:settings>
        <le:return format="dom"/>
      </le:settings>
      <lm:directory>
        <le:call name="get-directory">
          <le:string>samples</le:string>
        </le:call>
      </lm:directory>
    </le:action>
    <tst:node>
      <directory xmlns="http://www.sylma.org/storage/fs/basic/directory">
        <path>/sylma/parser/action/test/grouped/samples</path>
        <owner>root</owner>
        <group>0</group>
        <mode>700</mode>
        <read>true</read>
        <write>true</write>
        <execution>true</execution>
        <name>samples</name>
      </directory>
    </tst:node>
    <tst:expected>
      $result = $controler->getResult('dom');
      $node = $controler->getArgument('node');

      return
        $controler->compareNodes($result, $node);
    </tst:expected>
  </tst:test>
  <tst:test name="Read a file with ext-call encapsed">
    <le:action>
      <le:settings>
        <le:return format="txt"/>
      </le:settings>
      <lm:directory>
        <le:call name="get-directory">
          <le:string>samples</le:string>
          <le:call name="get-file">
            <le:string>path.txt</le:string>
          </le:call>
        </le:call>
      </lm:directory>
    </le:action>
    <tst:expected>
      $sResult = $controler->getResult('txt');

      return
        $sResult === $controler->getDirectory() . '/samples/path.txt';
    </tst:expected>
  </tst:test>
  <tst:test name="Load a directory with a two level depth obj/element-call">
    <le:action>
      <le:settings>
        <le:return format="dom"/>
      </le:settings>
      <lm:directory>
        <le:call name="get-directory">
          <lm:file path="samples/path.txt">
            <le:call name="read"/>
          </lm:file>
        </le:call>
      </lm:directory>
    </le:action>
    <tst:node>
      <directory xmlns="http://www.sylma.org/storage/fs/basic/directory">
        <path>/sylma/parser/action/test/grouped/samples/sub</path>
        <owner>root</owner>
        <group>0</group>
        <mode>700</mode>
        <read>true</read>
        <write>true</write>
        <execution>true</execution>
        <name>samples/sub</name>
      </directory>
    </tst:node>
    <tst:expected>
      $result = $controler->getResult('dom');
      $node = $controler->getArgument('node');

      return
        $controler->compareNodes($result, $node);
    </tst:expected>
  </tst:test>
  <tst:test name="Array of calls in a string">
    <le:action>
      <le:text>
        <lm:file path="samples/simple.txt">
          <le:call name="read"/>
          <le:call name="read"/>
        </lm:file>
      </le:text>
    </le:action>
    <tst:expected>
      $sResult = $controler->getResult('txt');

      return
        $sResult === '123123';
    </tst:expected>
  </tst:test>
  <tst:test name="Array of calls in a node">
    <le:action>
      <div>
        <lm:file path="samples/simple.txt">
          <le:call name="read"/>
          <le:call name="read"/>
        </lm:file>
      </div>
    </le:action>
    <tst:node>
      <div xmlns="http://www.sylma.org">123123</div>
    </tst:node>
    <tst:expected>
      $result = $controler->getResult('dom');
      $node = $controler->getArgument('node');

      return
        $controler->compareNodes($result, $node);
    </tst:expected>
  </tst:test>
  <tst:test name="Absolute object construction">
    <le:action>
      <le:settings>
        <le:return format="object"/>
      </le:settings>
      <le:object class="\sylma\parser\action\test\grouped\samples\Sample1"/>
    </le:action>
    <tst:expected>
      $result = $controler->getResult('object');

      return
        $result instanceof \sylma\parser\action\test\grouped\samples\Sample1;
    </tst:expected>
  </tst:test>
  <tst:test name="Relative object construction">
    <le:action>
      <le:settings>
        <le:return format="object"/>
      </le:settings>
      <le:object class="samples\Sample1"/>
    </le:action>
    <tst:expected>
      $result = $controler->getResult('object');

      return
        $result instanceof \sylma\parser\action\test\grouped\samples\Sample1;
    </tst:expected>
  </tst:test>
  <tst:test name="Parent object construction">
    <le:action>
      <le:settings>
        <le:return format="object"/>
      </le:settings>
      <le:action path="samples/sub/parent-object"/>
    </le:action>
    <tst:expected>
      $result = $controler->getResult('object');

      return
        $result instanceof \sylma\parser\action\test\grouped\samples\Sample1;
    </tst:expected>
  </tst:test>
</tst:tests>