<?xml version="1.0" encoding="utf-8"?>
<tst:tests xmlns:tst="http://www.sylma.org/core/argument/test" xmlns="http://www.sylma.org" xmlns:html="http://www.w3.org/1999/xhtml">
  <tst:description>Filed</tst:description>
  <tst:test name="Construction with an array">
    <tst:prepare>
      $controler->set('arg', $controler->create('filed', array(
        array(
          'abc' => 123,
          'def' => '456',
        )
      )));
    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      return
        $arg->read('abc') === 123 &amp;&amp;
        $arg->read('def') === '456'
    </tst:expected>
  </tst:test>
  <tst:test name="Construction with a file">
    <tst:prepare>$controler->set('arg', $controler->create('filed', array($controler->getDirectory() . '/simple.yml')));</tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      return
        $arg->read('abc') === 123 &amp;&amp;
        $arg->read('def') === '456'
    </tst:expected>
  </tst:test>
  <tst:test name="Import with relative path">
    <tst:prepare>$controler->set('arg', $controler->create('filed', array($controler->getDirectory() . '/import-relative.yml')));</tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      return
        $arg->read('ghi') === 789 &amp;&amp;
        $arg->read('jkl/abc') === 123 &amp;&amp;
        $arg->read('jkl/def') === '456'
      </tst:expected>
  </tst:test>
  <tst:test name="Import with absolute path">
    <tst:prepare>
      $controler->set('arg', $controler->create('filed', array(array(
        'ghi' => 789,
        'jkl' => '@sylma:import ' . $controler->getDirectory() . '/simple.yml;',
      ))));
    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      return
        $arg->read('ghi') === 789 &amp;&amp;
        $arg->read('jkl/abc') === 123 &amp;&amp;
        $arg->read('jkl/def') === '456'
      </tst:expected>
  </tst:test>
  <tst:test name="Self reference">
    <tst:prepare>
      $controler->set('arg', $controler->create('filed', array(array(
        'abc' => 123,
        'def' => '@sylma:self ../abc;',
      ))));
    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      return
        $arg->read('def') === 123
    </tst:expected>
  </tst:test>
  <tst:test name="Import's merge">
    <tst:prepare>
      $sDirectory = (string) $controler->getDirectory();
      $arg1 = $controler->create('filed', array(array(
        'abc' => "@sylma:import $sDirectory/simple.yml;",
      )));
      $arg2 = $controler->create('filed', array(array(
        'abc' => "@sylma:import $sDirectory/simple2.yml;",
      )));
      
      $arg1->merge($arg2);
      $controler->set('arg', $arg1);
    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      return
        $arg->read('abc/alpha') === 'red' &amp;&amp;
        $arg->read('abc/beta') === 10
      </tst:expected>
  </tst:test>
  <tst:test name="Import, get and merge">
    <tst:prepare>
      $sDirectory = (string) $controler->getDirectory();
      $arg1 = $controler->create('filed', array(array(
        'abc' => "@sylma:import $sDirectory/simple.yml;",
      )));
      $arg2 = $controler->create('filed', array(array(
        'abc' => "@sylma:import $sDirectory/simple2.yml;",
      )));
      $arg1->get('abc'); // will resolve token
      $arg1->merge($arg2);
      $controler->set('arg', $arg1);
    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      return
        $arg->read('abc/alpha') === 'red' &amp;&amp;
        $arg->read('abc/beta') === 10
      </tst:expected>
  </tst:test>
  <tst:test name="Import with absolute path and self reference">
    <tst:prepare>
      $controler->set('arg', $controler->create('filed', array(array(
        'directory' => (string) $controler->getDirectory(),
        'jkl' => 789,
        'mno' => '@sylma:import @sylma:self /directory; + /simple.yml;',
      ))));
    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      return
        $arg->read('jkl') === 789 &amp;&amp;
        $arg->read('mno/abc') === 123 &amp;&amp;
        $arg->read('mno/def') === '456'
      </tst:expected>
  </tst:test>
  <tst:test name="Get class name with token">
    <tst:prepare>
      $controler->set('arg', $controler->create('filed', array($controler->getDirectory() . '/class.yml')));
    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      $sToken = '@sylma-classbase';
      
      $arg->registerToken($sToken);
      $sName = $arg->read('classes/file/name');
      $sClass = $arg->getToken($sToken);
      
      return
        $sName == 'basic\File' &amp;&amp;
        $sClass == '\sylma\storage\fs'
    </tst:expected>
  </tst:test>
  <tst:test name="Get class name with token after edit">
    <tst:prepare>
      $controler->set('arg', $controler->create('filed', array($controler->getDirectory() . '/class.yml')));
    </tst:prepare>
    <tst:expected>
      $arg = $controler->get('arg');
      $sToken = '@sylma-classbase';
      
      $arg->set('classes/file/name', 'test');
      
      $arg->registerToken($sToken);
      $sName = $arg->read('classes/file/name');
      $sClass = $arg->getToken($sToken);
      
      return
        $sName == 'test' &amp;&amp;
        $sClass == '\sylma\storage\fs'
    </tst:expected>
  </tst:test>
</tst:tests>

