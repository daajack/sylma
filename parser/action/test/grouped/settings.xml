<?xml version="1.0" encoding="utf-8"?>
<tst:tests xmlns:tst="http://www.sylma.org/parser/action/test/grouped" xmlns="http://www.sylma.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:le="http://www.sylma.org/parser/action" xmlns:li="http://www.sylma.org/parser/caller" xmlns:lm="http://www.sylma.org/parser/action/basic">
  <tst:description>Settings &amp; arguments</tst:description>
  <tst:test name="Build object">
    <le:action>
      <le:settings>
        <lm:directory path="samples"/>
      </le:settings>
      <le:string>abc</le:string>
    </le:action>
    <tst:prepare>

    </tst:prepare>
    <tst:expected>
      $sResult = $controler->getResult('txt');

      return
        $sResult === 'abc';
    </tst:expected>
  </tst:test>
  <tst:test name="Require a string argument">
    <le:action>
      <le:settings>
        <le:argument format="php-string" name="path"/>
      </le:settings>
      <le:get-argument name="path"/>
    </le:action>
    <tst:prepare>
      $controler->setArgument('arguments', array('path' => 'abc'));
    </tst:prepare>
    <tst:expected>
      $sResult = $controler->getResult('txt');

      return
        $sResult === 'abc';
    </tst:expected>
  </tst:test>
  <tst:test name="Require a numeric argument">
    <le:action>
      <le:settings>
        <le:argument format="php-numeric" name="key"/>
      </le:settings>
      <le:get-argument name="key"/>
    </le:action>
    <tst:prepare>
      $controler->setArgument('arguments', array('key' => 123));
    </tst:prepare>
    <tst:expected>
      $iResult = $controler->getResult('object');

      return
        $iResult === 123;
    </tst:expected>
  </tst:test>
  <tst:test name="Require object argument">
    <le:action>
      <le:settings>
        <le:argument format="\sylma\storage\fs\file" name="file"/>
        <le:return format="object"/>
      </le:settings>
      <le:get-argument name="file"/>
    </le:action>
    <tst:prepare>
      $controler->setArgument('arguments', array('file' => $controler->getFile('samples/simple.txt')));
    </tst:prepare>
    <tst:expected>
      $result = $controler->getResult('object');

      return
        $result instanceof \sylma\storage\fs\file &amp;&amp;
        $result->getName() == 'simple.txt';
    </tst:expected>
  </tst:test>
  <tst:test name="Call object argument">
    <le:action>
      <le:settings>
        <le:argument format="\sylma\storage\fs\directory" name="dir"/>
        <le:return format="object"/>
      </le:settings>
      <le:get-argument name="dir">
        <li:call name="get-directory">sub</li:call>
      </le:get-argument>
    </le:action>
    <tst:prepare>
      $controler->setArgument('arguments', array('dir' => $controler->getDirectory('samples')));
    </tst:prepare>
    <tst:expected>
      $result = $controler->getResult('object');

      return
        $result instanceof \sylma\storage\fs\directory &amp;&amp;
        $result->getName() == 'sub';
    </tst:expected>
  </tst:test>
  <tst:test name="Validate and replace string argument with object">
    <le:action>
      <le:settings>
        <le:argument format="php-string" name="path">
          <le:validate return="true" replace="true">
            <le:call name="get-file">
              <le:get-argument name="path"/>
            </le:call>
          </le:validate>
        </le:argument>
      </le:settings>
      <le:get-argument name="path"/>
    </le:action>
    <tst:prepare>
      $controler->setArgument('arguments', array('path' => 'samples/simple.txt'));
    </tst:prepare>
    <tst:expected>
      $result = $controler->getResult('object');

      return
        $result instanceof \sylma\storage\fs\file &amp;&amp;
        $result->getName() == 'simple.txt';
    </tst:expected>
  </tst:test>
  <tst:test name="Validate string argument with file creation">
    <le:action>
      <le:settings>
        <le:argument format="php-string" name="path">
          <le:validate return="true">
            <le:call name="get-file">
              <le:get-argument name="path"/>
            </le:call>
          </le:validate>
        </le:argument>
      </le:settings>
    </le:action>
    <tst:prepare>
      $controler->setArgument('arguments', array('path' => 'samples/simple.txt'));
    </tst:prepare>
  </tst:test>
  <tst:test name="Simple good validation">
    <le:action>
      <le:settings>
        <le:argument format="php-string" name="path">
          <le:validate>
            <le:bool value="true"/>
          </le:validate>
        </le:argument>
      </le:settings>
    </le:action>
    <tst:prepare>
      $controler->setArgument('arguments', array('path' => 'samples/simple.txt'));
    </tst:prepare>
  </tst:test>
  <tst:test name="Simple bad validation" catch="\sylma\core\exception">
    <le:action>
      <le:settings>
        <le:argument format="php-string" name="path">
          <le:validate>
            <le:bool value="false"/>
          </le:validate>
        </le:argument>
      </le:settings>
    </le:action>
    <tst:prepare>
      $controler->setArgument('arguments', array('path' => 'samples/simple.txt'));
    </tst:prepare>
  </tst:test>
  <tst:test name="Optional validation's return">
    <le:action>
      <le:settings>
        <le:argument format="php-string" name="path">
          <le:validate required="false">
            <le:bool value="false"/>
          </le:validate>
        </le:argument>
      </le:settings>
    </le:action>
    <tst:prepare>
      $controler->setArgument('arguments', array('path' => 'samples/simple.txt'));
    </tst:prepare>
  </tst:test>
  <tst:test name="Required argument missing" catch="\sylma\core\exception">
    <le:action>
      <le:settings>
        <le:argument format="php-string" name="path">
          <le:validate required="false">
            <le:bool value="false"/>
          </le:validate>
        </le:argument>
      </le:settings>
    </le:action>
  </tst:test>
  <tst:test name="Validation with optional argument">
    <le:action>
      <le:settings>
        <le:argument format="php-string" name="path" required="false">
          <le:validate>
            <le:bool value="false"/>
          </le:validate>
        </le:argument>
      </le:settings>
    </le:action>
  </tst:test>
  <tst:test name="Default argument">
    <le:action>
      <le:settings>
        <le:argument format="php-string" name="path" required="false">
          <le:default>simple.txt</le:default>
        </le:argument>
      </le:settings>
      <le:get-argument name="path"/>
    </le:action>
    <tst:expected>
      $sResult = $controler->getResult('txt');

      return
        $sResult === 'simple.txt';
    </tst:expected>
  </tst:test>
  <tst:test name="Default argument with validation">
    <le:action>
      <le:settings>
        <le:argument format="php-string" name="path">
          <le:validate>
            <le:bool value="false"/>
          </le:validate>
          <le:default>simple.txt</le:default>
        </le:argument>
      </le:settings>
      <le:get-argument name="path"/>
    </le:action>
    <tst:prepare>
      $controler->setArgument('arguments', array('path' => 'samples/simple.txt'));
    </tst:prepare>
    <tst:expected>
      $sResult = $controler->getResult('txt');

      return
        $sResult === 'simple.txt';
    </tst:expected>
  </tst:test>
  <tst:test name="Default sent but not returned argument">
    <le:action>
      <le:settings>
        <le:argument format="php-string" name="path">
          <le:default return="false">simple.txt</le:default>
        </le:argument>
      </le:settings>
      <le:get-argument name="path"/>
    </le:action>
    <tst:prepare>
      $controler->setArgument('arguments', array('path' => 'samples/simple.txt'));
    </tst:prepare>
    <tst:expected>
      $sResult = $controler->getResult('txt');

      return
        $sResult === 'samples/simple.txt';
    </tst:expected>
  </tst:test>
  <tst:test name="Default not sent nether returned argument">
    <le:action>
      <le:settings>
        <le:argument format="php-string" name="path" required="false">
          <le:default return="false">simple.txt</le:default>
        </le:argument>
      </le:settings>
      <le:get-argument name="path"/>
    </le:action>
    <tst:expected>
      $aResult = $controler->getResult('array');

      return
        $aResult === array(null);
    </tst:expected>
  </tst:test>
</tst:tests>