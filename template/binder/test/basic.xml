<?xml version="1.0" encoding="utf-8"?>
<tst:tests
  xmlns:tst="http://www.sylma.org/modules/tester/parser"
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:view="http://2013.sylma.org/view"
  xmlns:le="http://2013.sylma.org/action"
  xmlns:tpl="http://2013.sylma.org/template"
  xmlns:stp="http://2013.sylma.org/schema/template"
  xmlns:sql="http://2013.sylma.org/storage/sql"
  xmlns:xl="http://2013.sylma.org/storage/xml"
  xmlns:ls="http://2013.sylma.org/parser/security"
  xmlns:js="http://2013.sylma.org/template/binder"
  xmlns:user="http://2013.sylma.org/view/test/sample1"
  xmlns:group="http://2013.sylma.org/view/test/sample2"
>
  <tst:description>Basic</tst:description>

  <tst:test name="Base object">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <div js:class="sylma.ui.Base" js:parent="example" js:name="test">world</div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;
      var node = test.getNode();

      return node.get('text') === 'world';
    </tst:expected>
  </tst:test>
  <tst:test name="Multiple root objects">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <div>
            <div js:class="sylma.ui.Base" class="first">hello</div>
            <div js:class="sylma.ui.Base" class="second">world</div>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var first = $$('.first').pick().retrieve('sylma-object');
      var second = $$('.second').pick().retrieve('sylma-object');

      sylma.tester.assertEquals(first.getNode().get('text'), 'hello');
      sylma.tester.assertEquals(second.getNode().get('text'), 'world');

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Base object with @id">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <div id="hello" js:class="sylma.ui.Base" js:parent="example" js:name="test">world</div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;
      var node = $('hello');

      return node.get('text') === 'world';
    </tst:expected>
  </tst:test>
  <tst:test name="Simple event">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <div js:class="sylma.ui.Base" js:parent="example" js:name="test">
            <js:event name="click">sylma.tester.test(true);</js:event>
            <p>hello</p>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:callback>

      var test = example.test;
      test.node.fireEvent('click');

    </tst:callback>
  </tst:test>
  <tst:test name="Event in different template">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <ul js:class="sylma.ui.Base" js:parent="example" js:name="test">
            <tpl:apply select="*"/>
          </ul>
        </tpl:template>
        <tpl:template match="user:*">
          <input js:class="sylma.ui.Base" value="{value()}">
            <js:name>
              <tpl:read select="title()"/>
            </js:name>
            <tpl:apply mode="events"/>
          </input>
        </tpl:template>
        <tpl:template match="user:name" mode="events">
          <js:event name="click">%parent%.getObject('email').getNode().fireEvent('change');</js:event>
        </tpl:template>
        <tpl:template match="user:email" mode="events">
          <js:event name="change">sylma.tester.test(true);</js:event>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:callback>

      var test = example.test;
      test.getObject('name').getNode().fireEvent('click');

    </tst:callback>
  </tst:test>
  <tst:test name="Event in different template duplicated">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <ul js:class="sylma.ui.Base" js:parent="example" js:name="test">
            <tpl:apply select="*"/>
          </ul>
        </tpl:template>
        <tpl:template match="user:*">
          <input js:class="sylma.ui.Base" value="{value()}">
            <js:name>
              <tpl:read select="title()"/>
            </js:name>
            <tpl:apply mode="events"/>
          </input>
        </tpl:template>
        <tpl:template match="user:name" mode="events">
          <tpl:apply mode="common"/>
          <js:event name="click">%parent%.getObject('email').getNode().fireEvent('test1');</js:event>
        </tpl:template>
        <tpl:template match="user:email" mode="events">
          <tpl:apply mode="common"/>
          <js:event name="click">sylma.tester.test(true);</js:event>
        </tpl:template>
        <tpl:template match="user:*" mode="common">
          <js:event name="test1">this.fireEvent('click');</js:event>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:callback>

      var test = example.test;
      test.getObject('name').getNode().fireEvent('test1');

    </tst:callback>
  </tst:test>
  <tst:test name="Event on element">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <div js:class="sylma.ui.Base" js:parent="example" js:name="test">
            <strong>
              <js:event name="click">sylma.tester.test(true);</js:event>
              world
            </strong>
            <p>hello</p>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:callback>

      var test = example.test;
      test.node.getElement('strong').fireEvent('click');

    </tst:callback>
  </tst:test>
  <tst:test name="Event on empty link" disabled="true">
    <!-- @TODO : bad closing when sent in JSON -->
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <div js:class="sylma.ui.Base" js:parent="example" js:name="test">
            <textarea js:node="strong">
              <js:event name="click">throw new Error('Must not be called');</js:event>
            </textarea>
            <span>
              <js:event name="click">sylma.tester.test(true);</js:event>
            </span>
            <p>hello</p>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:callback>

      var test = example.test;
      test.node.getElement('span').fireEvent('click');

    </tst:callback>
  </tst:test>
  <tst:test name="Event on element with existing class">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <div js:class="sylma.ui.Base" js:parent="example" js:name="test">
            <strong class="myclass">
              <js:event name="click">sylma.tester.test(this.tagName == 'STRONG');</js:event>
              world
            </strong>
            <p>hello</p>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:callback>

      var test = example.test;
      var result = test.getNode().getElement('strong').fireEvent('click');

    </tst:callback>
  </tst:test>
  <tst:test name="Simple method">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <div js:class="sylma.ui.Base" js:parent="example" js:name="test">
            <js:method name="update">return 'abc';</js:method>
            <p>hello</p>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:expected>

      var test = example.test;
      return test.update() === 'abc';

    </tst:expected>
  </tst:test>
  <tst:test name="Method with arguments">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <div js:class="sylma.ui.Base" js:parent="example" js:name="test">
            <js:method name="myTest" arguments="myarg">return myarg + 'world';</js:method>
            <p>hello</p>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:expected>

      var test = example.test;
      return test.myTest('hello') === 'helloworld';

    </tst:expected>
  </tst:test>
  <tst:test name="Overriding method">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <js:include>samples/sample1.js</js:include>
          <div js:class="sylma.samples.Sample1" js:parent="example" js:name="test">
            <js:method name="hello">return this.parent() + 'world';</js:method>
            <p>hello</p>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:expected>

      var test = example.test;
      return test.hello() === 'helloworld';

    </tst:expected>
  </tst:test>

  <tst:test name="Simple property">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <div js:class="sylma.ui.Base" js:parent="example" js:name="test">
            <js:option name="mykey">mytest</js:option>
            <div>Hello world</div>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;

      sylma.tester.assertEquals(test.get('mykey'), 'mytest');
      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Property foreigner as array">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <div js:class="sylma.ui.Base" js:parent="example" js:name="test">
            <js:option name="mykey">
              <le:array>
                <tpl:text>abc</tpl:text>
                <tpl:text>def</tpl:text>
                <tpl:text le:name="hello">world</tpl:text>
              </le:array>
            </js:option>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;

      sylma.tester.assertStrictEquals(test.get('mykey'), {
        0 : 'abc',
        1 : 'def',
        hello : 'world'
      });
      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Property foreigner as string">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <div js:class="sylma.ui.Base" js:parent="example" js:name="test">
            <js:option name="directory" cast="x"><le:directory/></js:option>
            <div>Hello world</div>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;

      sylma.tester.assertEquals(test.get('directory'), '/sylma/template/binder/test');
      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Simple sub node">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <div js:class="sylma.ui.Base" js:parent="example" js:name="test">
            <div js:node="hello">Hello</div>
            <div>World</div>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;

      return test.getNode('hello').get('text') === 'Hello';
    </tst:expected>
  </tst:test>
  <tst:test name="Node in different template">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template match="user:name" mode="node">
          <div js:node="hello">Hello</div>
        </tpl:template>
        <tpl:template match="*" mode="container">
          <div js:class="sylma.ui.Base">
            <tpl:apply mode="node"/>
            <div>World</div>
          </div>
        </tpl:template>
        <tpl:template>
          <content js:class="sylma.ui.Container" js:name="test" js:parent="example">
            <tpl:apply select="*" mode="container"/>
          </content>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;

      sylma.tester.assertEquals(test.tmp[0].getNode('hello'), undefined);
      sylma.tester.assertEquals(test.tmp[1].getNode('hello').get('text'), 'Hello');
      sylma.tester.assertEquals(test.tmp[2].getNode('hello'), undefined);

      return true;

    </tst:expected>
  </tst:test>
  <tst:test name="Multiple sub nodes">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <div js:class="sylma.ui.Base" js:parent="example" js:name="test">
            <p>Bla bla bla</p>
            <div js:node="hello">Hello</div>
            <div js:node="world">World</div>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;

      return test.getNode('hello').get('text') === 'Hello' &amp;&amp; test.getNode('world').get('text') === 'World';
    </tst:expected>
  </tst:test>
  <tst:test name="Sub node select box" disabled="true">
    <!-- node use a length property that interfere with node lookup -->
    <tst:document>
      <view:view>
        <xl:resource/>
        <tpl:template>
          <div js:class="sylma.ui.Base" js:parent="example" js:name="test">
            <p>Bla bla bla</p>
            <select js:node="select">
              <option>abc</option>
              <option selected="selected">def</option>
            </select>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:expected>
      var test = example.test;
      var select = test.getNode('select');

      sylma.tester.assertEquals(select.get('tag'), 'select');
      sylma.tester.assertEquals(select.getSelected().get('value')[0], 'def');

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Event in view condition" disabled="true">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <div>
            <tpl:if test="name = 'admin'">
              <h3 js:class="sylma.ui.Base" js:parent="example" js:name="test">
                <js:event name="click">
                  sylma.tester.test(true);
                </js:event>
                <tpl:text>is-admin</tpl:text>
              </h3>
            </tpl:if>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:callback>

      var test = example.test;
      test.node.fireEvent('click');

    </tst:callback>
  </tst:test>

  <tst:test name="Update">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
        <tpl:template>
          <js:include>samples/update01.js</js:include>
          <div js:class="sylma.samples.Sample2" js:parent="example" js:name="test">
            <js:option name="path" cast="x">
              <le:directory/>
              <tpl:text>/samples/update01</tpl:text>
            </js:option>
            <js:option name="sylma-inside">1</js:option>
            <button>
              <js:event name="click">%object%.update();</js:event>
            </button>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:prepare>
      $manager->buildScript('samples/update01.vml');
    </tst:prepare>
    <tst:callback>

      var test = example.test;
      test.node.getElement('button').fireEvent('click');

    </tst:callback>
  </tst:test>
  <tst:test name="Update collection">
    <tst:document>
      <view:view>
        <xl:resource/>
        <tpl:template>
          <js:include>samples/update02.js</js:include>
          <div js:class="sylma.samples.Sample2" js:parent="example" js:name="test">
            <js:option name="path" cast="x">
              <le:directory/>
              <tpl:text>/samples/update02</tpl:text>
            </js:option>
            <js:option name="sylma-inside">1</js:option>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:prepare>
      $manager->buildScript('samples/update02.vml');
    </tst:prepare>
    <tst:callback>

      var test = example.test;
      test.run();

    </tst:callback>
  </tst:test>
</tst:tests>