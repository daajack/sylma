<?xml version="1.0" encoding="utf-8"?>
<tst:tests
  xmlns:tst="http://www.sylma.org/modules/tester/parser"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:view="http://2013.sylma.org/view"
  xmlns:tpl="http://2013.sylma.org/template"
  xmlns:stp="http://2013.sylma.org/schema/template"
  xmlns:sql="http://2013.sylma.org/storage/sql"
  xmlns:ls="http://2013.sylma.org/parser/security"
  xmlns:le="http://2013.sylma.org/action"
  xmlns:cls="http://2013.sylma.org/core/factory"

  xmlns:user="http://2013.sylma.org/view/test/sample1"
  xmlns:group="http://2013.sylma.org/view/test/sample2"
>
  <tst:description>Foreign</tst:description>
  <tst:datas name="mysql://user2">
    id;name;email;group_id
    1;root;root@sylma.org;2
    2;admin;admin@sylma.org;1
    3;webmaster;webmaster@sylma.org;0
    4;user1;user1@sylma.org;1
  </tst:datas>
  <tst:datas name="mysql://group">
    id;name
    1;group01
    2;group02
  </tst:datas>
  <tst:datas name="mysql://user_group">
    user;group
    1;1
    1;2
    2;1
  </tst:datas>
  <tst:test name="Foreign single key" disabled="true">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource>
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <view:template>
          <div>
            <h3><stp:apply select="name"/></h3>
            <tpl:apply select="group/name"/>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div><h3>root</h3>group01</div>
    </tst:node>
  </tst:test>
  <tst:test name="Foreign single key with template">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource>
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <view:template>
          <div>
            <tpl:apply select="group_id"/>
          </div>
        </view:template>
        <view:template match="user:group_id">
          <li><tpl:apply select="ref()/name"/></li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div><li>group02</li></div>
    </tst:node>
  </tst:test>
  <tst:test name="Foreign single key matching type">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource>
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <view:template>
          <div>
            <tpl:apply select="group_id"/>
          </div>
        </view:template>
        <view:template match="sql:foreign">
          <strong><tpl:apply select="ref()"/></strong>
        </view:template>
        <view:template match="group:group">
          <span><tpl:apply select="name"/></span>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div><strong><span>group02</span></strong></div>
    </tst:node>
  </tst:test>
  <tst:test name="Single key apply ref">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource>
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <view:template>
          <div>
            <tpl:apply select="group_id/ref()"/>
          </div>
        </view:template>
        <view:template match="group:group">
          <li><tpl:apply select="name"/></li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div><li>group02</li></div>
    </tst:node>
  </tst:test>
  <tst:test name="Single key apply ref in static">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource multiple="x"/>
        <view:schema>samples/user2.xql</view:schema>
        <view:template>
          <div>
            <tpl:apply select="static()/group_id/ref()"/>
          </div>
        </view:template>
        <view:template match="group:group">
          <h2><tpl:apply select="title()"/></h2>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <h2>group</h2>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Get ref values">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <view:template>
          <div><stp:apply select="group_id"/></div>
        </view:template>
        <view:template match="user:group_id">
          <ul><tpl:apply select="all()"/></ul>
        </view:template>
        <view:template match="group:group">
          <li><tpl:apply select="group:name"/></li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <ul>
          <li>group01</li>
          <li>group02</li>
          <li>group03</li>
        </ul>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Get ref values with path">
    <tst:document>
      <view:view group:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <view:template>
          <div><stp:apply select="group_id/all()"/></div>
        </view:template>
        <view:template match="group:group">
          <li><tpl:apply select="group:name"/></li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <li>group01</li>
        <li>group02</li>
        <li>group03</li>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Apply template on ref values">
    <tst:document>
      <view:view group:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <view:template>
          <div><stp:apply select="group_id/all()" mode="select"/></div>
        </view:template>
        <view:template match="*" mode="select">
          <li><tpl:apply select="group:name"/></li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <li>group01</li>
        <li>group02</li>
        <li>group03</li>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Read all ref parent value">
    <tst:document>
      <view:view group:ns="ns" user:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <view:template>
          <div><stp:apply select="group_id/all()"/></div>
        </view:template>
        <view:template match="group:group">
          <li><tpl:read select="parent()"/></li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <li>1</li>
        <li>1</li>
        <li>1</li>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Apply all ref parent value">
    <tst:document>
      <view:view group:ns="ns" user:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <view:template>
          <div><stp:apply select="group_id/all()"/></div>
        </view:template>
        <view:template match="group:group">
          <li><tpl:apply select="parent()/value()"/></li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <li>1</li>
        <li>1</li>
        <li>1</li>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Multiple key">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource>
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/user4.xql</view:schema>
        <view:template>
          <div>
            <h3><tpl:apply select="name"/></h3>
            <tpl:apply select="group/ref()"/>
          </div>
        </view:template>
        <view:template match="group:group">
          <li><tpl:apply select="name"/></li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <h3>root</h3>
        <li>group01</li>
        <li>group02</li>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Multiple apply collection">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource>
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/user4.xql</view:schema>
        <view:template>
          <div>
            <h3><tpl:apply select="name"/></h3>
            <tpl:apply select="group/collection()"/>
          </div>
        </view:template>
        <view:template match="sql:collection">
          <ul>
            <tpl:apply select="*"/>
          </ul>
        </view:template>
        <view:template match="group:group">
          <li><tpl:apply select="name"/></li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <h3>root</h3>
        <ul>
          <li>group01</li>
          <li>group02</li>
        </ul>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Join">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource multiple="x">
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/user4.xql</view:schema>
        <tpl:template>
          <div>
            <tpl:apply select="*"/>
          </div>
        </tpl:template>
        <view:template match="user:user">
          <h3><tpl:apply select="name"/></h3>
          <tpl:apply select="group/join()"/>
        </view:template>
        <view:template match="group:group"/>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <h3>root</h3>
        <h3>root</h3>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Join with select">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource multiple="x">
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/user4.xql</view:schema>
        <tpl:template>
          <div>
            <tpl:apply select="*"/>
          </div>
        </tpl:template>
        <view:template match="user:user">
          <h3><tpl:apply select="name"/></h3>
          <tpl:apply select="group/join()"/>
        </view:template>
        <view:template match="group:group">
          <li><tpl:read select="name"/></li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <h3>root</h3>
        <li>group01</li>
        <h3>root</h3>
        <li>group02</li>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Join with distinct">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource multiple="x">
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/user4.xql</view:schema>
        <tpl:template>
          <div>
            <tpl:apply select="*"/>
          </div>
        </tpl:template>
        <view:template match="user:user">
          <sql:distinct name="id"/>
          <h3><tpl:apply select="name"/></h3>
          <tpl:apply select="group/join()"/>
        </view:template>
        <view:template match="group:group"/>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <h3>root</h3>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Foreign multiple values">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource>
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/user4.xql</view:schema>
        <view:template>
          <div><tpl:apply select="group/all()"/></div>
        </view:template>
        <view:template match="group:group">
          <li><tpl:apply select="name"/></li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <li>group01</li>
        <li>group02</li>
        <li>group03</li>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Foreign multiple compare values">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource>
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/user4.xql</view:schema>
        <view:template>
          <div><tpl:apply select="group/all()"/></div>
        </view:template>
        <view:template match="group:group">
          <li>
            <tpl:if test="id in parent()/values()">
              <tpl:token name="selected">x</tpl:token>
            </tpl:if>
            <tpl:apply select="name"/>
          </li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <li selected="x">group01</li>
        <li selected="x">group02</li>
        <li>group03</li>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Foreign key path access" disabled="true">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource>
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/user4.xql</view:schema>
        <view:template>
          <div>
            <tpl:apply select="group/name"/>
          </div>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div><h3>root</h3><li>group01</li><li>group02</li></div>
    </tst:node>
  </tst:test>
  <tst:test name="Foreign key with abstract group" disabled="true">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/user3.xql</view:schema>
        <view:template>
          <div>
            <h3><stp:apply select="name"/></h3>
            <tpl:apply select="groups/group"/>
          </div>
        </view:template>
        <view:template match="group">
          <li><tpl:apply/></li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div><h3>def</h3><a href="mailto:{$email}">test</a></div>
    </tst:node>
  </tst:test>
  <tst:test name="List with simple foreign">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource multiple="multiple"/>
        <view:schema>samples/user2.xql</view:schema>
        <view:template>
          <div>
            <tpl:apply select="*"/>
          </div>
        </view:template>
        <view:template match="user:user">
          <a href="email"><tpl:apply select="name"/>,<tpl:apply select="group_id/ref()"/></a>
        </view:template>
        <view:template match="group:group">
          <tpl:read select="id"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <a href="email">root,2</a>
        <a href="email">admin,1</a>
        <a href="email">webmaster,</a>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="List with simple foreign name's collision" disabled="true">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource multiple="multiple"/>
        <view:schema>samples/user2.xql</view:schema>
        <view:template>
          <div>
            <tpl:apply select="*"/>
          </div>
        </view:template>
        <view:template match="user:user">
          <div>
            <a href="email"><tpl:apply select="name"/>,<tpl:apply select="group_id/ref()"/></a>
          </div>
        </view:template>
        <view:template match="group:group">
          <tpl:read select="name"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <a href="email">root,2</a>
        <a href="email">admin,1</a>
        <a href="email">webmaster,0</a>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Insert multiple">
    <tst:document>
      <view:view user:ns="ns" mode="insert">
        <sql:resource/>
        <view:schema>samples/user4.xql</view:schema>
        <view:template>
          <tpl:apply select="name,group"/>
        </view:template>
        <view:template match="user:*">
          <tpl:register/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>
      $manager->setToken('/sylma/storage/sql/test/foreignxml-insert-multiple');

      return
        array('post' => $manager->createArgument(array(
          'name' => 'foreign01',
          'group' => array(2,3),
        )))
    </tst:load>
    <tst:expected>
      $sID = $manager->readArgument('result');
      $manager->setArgument('id', $sID);

      $user = $manager->runQuery("SELECT id_group FROM user_group WHERE id_user = $sID", 4);
      $manager->runQuery("DELETE FROM user WHERE id = $sID", 2);

      $manager->assertEqual($user->asArray(), array('2', '3'));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Update multiple">
    <tst:document>
      <view:view user:ns="ns" mode="update">
        <sql:resource>
          <sql:id><le:get-argument name="id" source="post"/></sql:id>
        </sql:resource>
        <view:schema>samples/user4.xql</view:schema>
        <view:template>
          <tpl:apply select="group"/>
        </view:template>
        <view:template match="user:*">
          <tpl:register/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $manager->setToken('/sylma/storage/sql/test/foreignxml-update-multiple');
      $sID = $manager->readArgument('id');

      return
        array('post' => $manager->createArgument(array(
          'id' => $sID,
          'group' => array(1),
        )))
    </tst:load>
    <tst:expected>
      $sID = $manager->readArgument('id');
      $user = $manager->runQuery("SELECT id_group FROM user_group WHERE id_user = $sID", 4);

      $manager->assertEqual($user->asArray(), array('1'));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Ref call static dummy" exception-parser="\sylma\core\exception">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">

        <sql:resource multiple="multiple"/>
        <view:schema>samples/user2.xql</view:schema>

        <tpl:template>

          <tpl:apply select="source()"/>
          <tpl:apply select="static()"/>

        </tpl:template>

        <tpl:template match="sql:table">
          <div>
            <tpl:apply select="group_id/all()"/>
          </div>
        </tpl:template>

        <tpl:template match="group:group">
          <tpl:filter name="name">
            <tpl:read select="name"/>
          </tpl:filter>
        </tpl:template>

      </view:view>
    </tst:document>
  </tst:test>
  <tst:test name="Insert as reference" disabled="true">
    <tst:document>
      <view:view user:ns="ns" mode="insert">
        <sql:resource/>
        <view:schema>samples/user2.xql</view:schema>
        <view:template match="sql:table">
          <tpl:apply select="* ^ id"/>
        </view:template>
        <view:template match="*">
          <tpl:register/>
        </view:template>
        <view:template match="user:group_id">
          <tpl:apply select="ref()"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $manager->setToken('/sylma/storage/sql/test/alterxml-table-in-latin-1');

      return
        array('post' => $manager->createArgument(array(
          'name' => 'Faith Mills',
          'group_id' => array(
            array(
              'name' => 'group01',
            ),
          ),
        )));

    </tst:load>
    <tst:expected>

      $sID = $manager->read('id');
      $manager->setArgument('id', $sID);

      $user = $manager->runQuery("SELECT user.name AS user, `group`.id, `group`.name AS `group` FROM user LEFT JOIN `group` ON `group`.id = user.group_id WHERE user.id = $sID", 1);

      $manager->assertEqual($user->asArray(), array(
        'name' => 'Faith Mills',
        'id' => 1,
        'group' => 'group01',
      ));

      return true;

    </tst:expected>
  </tst:test>
  <tst:test name="Update as reference">
    <tst:prepare>

      $sID = $manager->runQuery("INSERT INTO `group` (name) VALUES ('group01')", 8);
      $manager->set('group', $sID);
      $manager->set('user', $manager->runQuery("INSERT INTO user (name, group_id) VALUES ('Faith Mills', $sID)", 8));

    </tst:prepare>
    <tst:document>
      <view:view user:ns="ns" mode="update">
        <sql:resource>
          <sql:id>
            <le:get-argument name="id" source="post"/>
          </sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <view:template match="sql:table">
          <tpl:apply select="*"/>
        </view:template>
        <view:template match="*">
          <tpl:register/>
        </view:template>
        <view:template match="user:group_id">
          <tpl:apply select="subref()"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $manager->setToken('/sylma/storage/sql/test/update-as-reference');
      $iUser = $manager->read('user');
      $iGroup = $manager->read('group');

      return
        array('post' => $manager->createArgument(array(
          'id' => $iUser,
          'name' => 'Faith Mills 2',
          'group_id' => array(
            'id' => $iGroup,
            'name' => 'group01b',
          ),
        )));

    </tst:load>
    <tst:expected>

      $sID = $manager->read('user');

      $user = $manager->runQuery("SELECT user.name, `group`.name AS `group` FROM user LEFT JOIN `group` ON `group`.id = user.group_id WHERE user.id = $sID", 0);

      $manager->assertEqual($user->asArray(), array(
        'name' => 'Faith Mills 2',
        'group' => 'group01b',
      ));

      return true;

    </tst:expected>
  </tst:test>
  <tst:test name="Alias as reference">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource/>
        <view:schema>samples/user2.xql</view:schema>
        <view:template>
          <div>
            <tpl:apply/>
          </div>
        </view:template>
        <view:template match="sql:table">
          <tpl:apply select="*"/>
        </view:template>
        <view:template match="*">
          <input type="text" name="{alias('form')}" id="{alias()}"/>
        </view:template>
        <view:template match="user:group_id">
          <tpl:apply select="subref()"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
     <div>
      <input type="text" name="id" id="id"/>
      <input type="text" name="name" id="name"/>
      <input type="text" name="group_id[id]" id="group_id"/>
      <input type="text" name="group_id[name]" id="group_name"/>
    </div>
    </tst:node>
  </tst:test>
</tst:tests>