<?xml version="1.0" encoding="utf-8"?>
<tst:tests
  xmlns:tst="http://www.sylma.org/modules/tester/parser"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:view="http://2013.sylma.org/view"
  xmlns:tpl="http://2013.sylma.org/template"
  xmlns:stp="http://2013.sylma.org/schema/template"
  xmlns:sql="http://2013.sylma.org/storage/sql"
  xmlns:ls="http://2013.sylma.org/parser/security"

  xmlns:user="http://2013.sylma.org/view/test/sample1"
  xmlns:le="http://2013.sylma.org/action"
>
  <tst:description>Form</tst:description>
  <tst:datas name="mysql://user">
    id;name;email
    1;root;root@sylma.org
    2;admin;admin@sylma.org
    3;webmaster;webmaster@sylma.org
  </tst:datas>
  <tst:test name="Simple insert">
    <tst:document>
      <view:view user:ns="ns" mode="insert">
        <sql:resource/>
        <view:schema>samples/user1.xql</view:schema>
        <view:template>
          <tpl:apply select="name, email"/>
        </view:template>
        <view:template match="user:*">
          <tpl:register/>
          <input type="text" name="{alias()}" value="{apply()}"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $manager->setToken('/sylma/view/test/grouped/formxml-simple-insert');

      $aUser = array(
        'name' => 'tester',
        'email' => 'tester@sylma.org',
      );

      $manager->set('user', $aUser);

      return
        array('post' => $manager->createArgument($aUser))
    </tst:load>
    <tst:expected>
      $sID = $manager->readArgument('result');
      $manager->setArgument('id', $sID);

      $user = $manager->runQuery("SELECT name, email FROM user WHERE id = $sID", 0);
      $manager->assertEquals($user->query(), $manager->get('user')->query());

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Simple update">
    <tst:prepare>

      $sID = $manager->runQuery("INSERT INTO user (name, email) VALUES ('tester', 'tester@sylma.org')", 8);
      $manager->set('id', $sID);

    </tst:prepare>
    <tst:document>
      <view:view user:ns="ns" mode="update">
        <sql:resource>
          <sql:id><le:get-argument name="id" source="post"/></sql:id>
        </sql:resource>
        <view:schema>samples/user1.xql</view:schema>
        <view:template>
          <tpl:apply select="name, email"/>
        </view:template>
        <view:template match="user:*">
          <tpl:register/>
          <input type="text" name="{alias()}" value="{apply()}"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $manager->setToken('/sylma/view/test/grouped/formxml-simple-update');
      $sID = $manager->readArgument('id');

      return
        array('post' => $manager->createArgument(array(
          'id' => $sID,
          'name' => 'tester02',
          'email' => 'tester02@sylma.org',
        )))
    </tst:load>
    <tst:expected>
      $sID = $manager->readArgument('id');

      $user = $manager->runQuery("SELECT name, email FROM user WHERE id = $sID", 0);

      $manager->assertEqual($user->asArray(), array(
        'name' => 'tester02',
        'email' => 'tester02@sylma.org',
      ));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Constant update">
    <tst:prepare>

      $sID = $manager->runQuery("INSERT INTO user (name, email) VALUES ('tester', 'tester02@sylma.org')", 8);
      $manager->set('id', $sID);

    </tst:prepare>
    <tst:document>
      <view:view user:ns="ns" mode="update">
        <sql:resource>
          <sql:id><le:get-argument name="id" source="post"/></sql:id>
        </sql:resource>
        <view:schema>samples/user1.xql</view:schema>
        <view:template>
          <tpl:apply select="name"/>
        </view:template>
        <view:template match="user:*">
          <tpl:register>abc</tpl:register>
          <input type="text" name="{alias()}" value="{apply()}"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $manager->setToken('/sylma/view/test/grouped/formxml-constant-update');
      $sID = $manager->readArgument('id');

      return
        array('post' => $manager->createArgument(array(
          'id' => $sID,
        )))
    </tst:load>
    <tst:expected>
      $sID = $manager->readArgument('id');

      $user = $manager->runQuery("SELECT name, email FROM user WHERE id = $sID", 0);

      $manager->assertEqual($user->asArray(), array(
        'name' => 'abc',
        'email' => 'tester02@sylma.org',
      ));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Predefined update">
    <tst:prepare>

      $sID = $manager->runQuery("INSERT INTO user (name, email) VALUES ('tester', 'tester02@sylma.org')", 8);
      $manager->set('id', $sID);

    </tst:prepare>
    <tst:document>
      <view:view user:ns="ns" mode="update">
        <sql:resource>
          <sql:id><le:get-argument name="id" source="post"/></sql:id>
        </sql:resource>
        <view:schema>samples/user1.xql</view:schema>
        <view:template>
          <tpl:apply select="name"/>
        </view:template>
        <view:template match="user:*">
          <tpl:register>
            <tpl:read select="parent()/name()"/>
          </tpl:register>
          <input type="text" name="{alias()}" value="{apply()}"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $manager->setToken('/sylma/view/test/grouped/formxml-predefined-update');
      $sID = $manager->read('id');

      return
        array('post' => $manager->createArgument(array(
          'id' => $sID,
        )))
    </tst:load>
    <tst:expected>
      $sID = $manager->read('id');

      $user = $manager->runQuery("SELECT name, email FROM user WHERE id = $sID", 0);

      $manager->assertEqual($user->asArray(), array(
        'name' => 'user',
        'email' => 'tester02@sylma.org',
      ));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Handler reflector">
    <tst:prepare>

      $sID = $manager->runQuery("INSERT INTO user (name, email) VALUES ('tester', 'tester02@sylma.org')", 8);
      $manager->set('id', $sID);

    </tst:prepare>
    <tst:document>
      <view:view user:ns="ns" mode="update">
        <sql:resource>
          <sql:id><le:get-argument name="id" source="post"/></sql:id>
        </sql:resource>
        <view:schema>samples/user5.xql</view:schema>
        <view:template>
          <tpl:apply select="name, email"/>
        </view:template>
        <view:template match="user:*">
          <tpl:register/>
          <input type="text" name="{alias()}" value="{apply()}"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $manager->setToken('/sylma/view/test/grouped/formxml-handler-reflector');
      $sID = $manager->read('id');

      return
        array('post' => $manager->createArgument(array(
          'id' => $sID,
          'name' => 'tester03',
          'email' => 'tester03@sylma.org',
          'add' => '.com',
        )))
    </tst:load>
    <tst:expected>
      $sID = $manager->readArgument('id');

      $user = $manager->runQuery("SELECT name,email FROM user WHERE id = $sID", 0);

      $manager->assertEqual($user->query(), array(
        'name' => 'tester03',
        'email' => 'tester03@sylma.org.com',
      ));

      return true;

    </tst:expected>
  </tst:test>
  <tst:test name="Field inline reflector">
    <tst:prepare>

      $sID = $manager->runQuery("INSERT INTO user (name, email) VALUES ('tester', 'tester02@sylma.org')", 8);
      $manager->set('id', $sID);

    </tst:prepare>
    <tst:document>
      <view:view user:ns="ns" mode="update">
        <sql:resource>
          <sql:id><le:get-argument name="id" source="post"/></sql:id>
        </sql:resource>
        <view:schema>samples/user1.xql</view:schema>
        <view:template>
          <tpl:apply select="name, email"/>
        </view:template>
        <view:template match="user:*">
          <tpl:register/>
          <input type="text" name="{alias()}" value="{apply()}"/>
        </view:template>
        <view:template match="user:email">
          <tpl:register reflector="\sylma\view\test\grouped\samples\String1"/>
          <input type="text" name="{alias()}" value="{apply()}"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $manager->setToken('/sylma/view/test/grouped/formxml-field-inline-reflector');
      $sID = $manager->readArgument('id');

      return
        array('post' => $manager->createArgument(array(
          'id' => $sID,
          'name' => 'tester03b',
          'email' => 'tester03b@sylma.org',
        )))
    </tst:load>
    <tst:expected>
      $sID = $manager->readArgument('id');

      $user = $manager->runQuery("SELECT name,email FROM user WHERE id = $sID", 0);
      $manager->runQuery("DELETE FROM user WHERE id = $sID", 2);

      $manager->assertEqual($user->query(), array(
        'name' => 'tester03b',
        'email' => 'override1',
      ));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Type reflector">
    <tst:document>
      <view:view user:ns="ns" mode="insert">
        <sql:resource>
          <sql:id>
            <le:get-argument name="id" source="post"/>
          </sql:id>
        </sql:resource>
        <view:schema>samples/user_field_reflector.xql</view:schema>
        <view:template>
          <tpl:apply select="name,no"/>
        </view:template>
        <view:template match="user:*">
          <tpl:register/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $manager->setToken('/sylma/view/test/grouped/formxml-type-reflector');

      return
        array('post' => $manager->createArgument(array(
          'name' => 'tester_reflector',
          'no' => 123,
        )))
    </tst:load>
    <tst:expected>
      $sID = $manager->readArgument('result');

      $user = $manager->runQuery("SELECT name,no FROM user_reflector WHERE id = $sID", 0);
      $manager->runQuery("DELETE FROM user_reflector WHERE id = $sID", 2);

      $manager->assertEqual($user->query(), array(
        'name' => 'tester_reflector',
        'no' => '123',
      ));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Really simple update" disabled="true">
    <tst:document>
      <view:view user:ns="ns" mode="update">
        <sql:resource>
          <sql:source>test</sql:source>
          <sql:id><le:get-argument name="id" source="post"/></sql:id>
        </sql:resource>
        <view:schema>samples/user1.xql</view:schema>
        <view:template>
          <tpl:register select="name"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>
      $sID = $manager->readArgument('id');

      return
        array('post' => $manager->createArgument(array(
          'id' => $sID,
          'name' => 'tester02',
          'email' => 'tester02@sylma.org',
        )))
    </tst:load>
    <tst:expected>
      $sID = $manager->readArgument('id');

      $user = $manager->runQuery("SELECT * FROM user WHERE id = $sID", 0);
      $manager->runQuery("DELETE FROM user WHERE id = $sID", 2);

      return
        $user->read('name') === 'tester02' &amp;&amp;
        $user->read('email') === 'tester02@sylma.org';
    </tst:expected>
  </tst:test>
  <tst:test name="Simple empty">
    <tst:document>
      <view:view user:ns="ns" mode="insert">
        <sql:resource/>
        <view:schema>samples/user1c.xql</view:schema>
        <view:template>
          <tpl:apply select="name,source"/>
        </view:template>
        <view:template match="user:*">
          <tpl:register/>
          <input type="text" name="{alias()}" value="{apply()}"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $manager->setToken('/sylma/view/test/grouped/formxml-simple-empty');

      return
        array('post' => $manager->createArgument(array(
          'name' => 'tester01b',
          'source' => '',
        )))
    </tst:load>
    <tst:expected>
      $sID = $manager->readArgument('result');

      $user = $manager->runQuery("SELECT name,source FROM user1c WHERE id = $sID", 0);

      $manager->assertEqual($user->query(), array(
        'name' => 'tester01b',
        'source' => 'hello',
      ));

      return true;

    </tst:expected>
  </tst:test>
  <tst:test name="Simple null">
    <tst:document>
      <view:view user:ns="ns" mode="update">
        <sql:resource>
          <sql:id>
            <le:get-argument name="id" source="post"/>
          </sql:id>
        </sql:resource>
        <view:schema>samples/user1c.xql</view:schema>
        <view:template>
          <tpl:apply select="name,email,source"/>
        </view:template>
        <view:template match="user:*">
          <tpl:register mode="null"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $sID = $manager->runQuery("INSERT INTO user1c (name,email,source) VALUES ('tester01c', 'tester01c@sylma.org', 'world')", 8);
      $manager->setArgument('id', $sID);
      $manager->setToken('/sylma/view/test/grouped/formxml-simple-null');

      return
        array('post' => $manager->createArgument(array(
          'id' => $sID,
          'email' => 'email01',
          'source' => '',
        )))
    </tst:load>
    <tst:expected>

      $sID = $manager->readArgument('id');
      $user = $manager->runQuery("SELECT name,email,source FROM user1c WHERE id = $sID", 0);

      $manager->assertEqual($user->query(), array(
        'name' => 'tester01c',
        'email' => 'email01',
        'source' => 'world',
      ));

      return true;

    </tst:expected>
  </tst:test>
  <tst:test name="Empty with empty mode">
    <tst:document>
      <view:view user:ns="ns" mode="update">
        <sql:resource>
          <sql:id>
            <le:get-argument name="id" source="post"/>
          </sql:id>
        </sql:resource>
        <view:schema>samples/user1c.xql</view:schema>
        <view:template>
          <tpl:apply select="name,email,source"/>
        </view:template>
        <view:template match="user:*">
          <tpl:register mode="empty"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $sID = $manager->runQuery("INSERT INTO user1c (name,email,source) VALUES ('tester01d', 'tester01d@sylma.org', 'hello')", 8);
      $manager->setArgument('id', $sID);
      $manager->setToken('/sylma/view/test/grouped/formxml-empty-with-empty-mode');

      return
        array('post' => $manager->createArgument(array(
          'id' => $sID,
          'name' => '',
          'email' => '',
          'source' => 'world',
        )))
    </tst:load>
    <tst:expected>

      $sID = $manager->readArgument('id');
      $user = $manager->runQuery("SELECT name,source FROM user1c WHERE id = $sID", 0);

      $manager->assertEqual($user->query(), array(
        'name' => '',
        'source' => '',
        'source' => 'world',
      ));

      return true;

    </tst:expected>
  </tst:test>
  <tst:test name="Empty with default mode">
    <tst:document>
      <view:view user:ns="ns" mode="update">
        <sql:resource>
          <sql:id>
            <le:get-argument name="id" source="post"/>
          </sql:id>
        </sql:resource>
        <view:schema>samples/user1c.xql</view:schema>
        <view:template>
          <tpl:apply select="name,email,source"/>
        </view:template>
        <view:template match="user:*">
          <tpl:register/>
          <input type="text" name="{alias()}" value="{apply()}"/>
        </view:template>
        <view:template match="user:source">
          <tpl:register mode="default"/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $sID = $manager->runQuery("INSERT INTO user1c (name,email,source) VALUES ('tester01d', 'tester01d@sylma.org', 'world')", 8);
      $manager->setArgument('id', $sID);
      $manager->setToken('/sylma/view/test/grouped/formxml-empty-with-default-mode');

      return
        array('post' => $manager->createArgument(array(
          'id' => $sID,
          'name' => 'tester01e',
          'email' => '',
          'source' => '',
        )))
    </tst:load>
    <tst:expected>

      $sID = $manager->readArgument('id');
      $user = $manager->runQuery("SELECT name,email,source FROM user1c WHERE id = $sID", 0);

      $manager->resetDB();

      $manager->assertEqual($user->query(), array(
        'name' => 'tester01e',
        'email' => 'mymail',
        'source' => 'hello',
      ));

      return true;

    </tst:expected>
  </tst:test>
  <tst:test name="Trigger on select">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>samples/user1.xql</view:schema>
        <view:template>
          <div>
            <h3><tpl:apply select="name"/></h3>
            <a href="mailto:email">test</a>
          </div>
          <sql:token>
            <le:directory/>
            <tpl:text>/samples/view1</tpl:text>
          </sql:token>
          <sql:trigger>
            <le:script path="samples/view1"/>
          </sql:trigger>
        </view:template>
      </view:view>
    </tst:document>
    <tst:expected>
      $sID = 2;

      $user = $manager->runQuery("SELECT name, email FROM user WHERE id = $sID", 0);
      $manager->resetDB();

      $manager->assertEqual($user->query(), array(
        'name' => 'admin',
        'email' => 'trigger1@sylma.org',
      ));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Trigger on update">
    <tst:document>
      <view:view mode="update" user:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>samples/user1.xql</view:schema>
        <view:template>
          <div>
            <h3><tpl:apply select="name"/></h3>
            <a href="mailto:email">test</a>
          </div>
          <sql:trigger>
            <le:script path="samples/view2"/>
          </sql:trigger>
        </view:template>
        <view:template match="user:*">
          <tpl:register/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $manager->setToken('/sylma/view/test/grouped/formxml-trigger-on-update');
      $manager->setToken('/sylma/view/test/grouped/samples/view2');

      return
        array('post' => $manager->createArgument(array(
          'name' => 'trigger2',
        )))
    </tst:load>
    <tst:expected>
      $sID = 2;

      $user = $manager->runQuery("SELECT name, email FROM user WHERE id = $sID", 0);
      $manager->resetDB();

      $manager->assertEqual($user->query(), array(
        'name' => 'trigger2',
        'email' => 'trigger2@sylma.org',
      ));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Trigger get result insert">
    <tst:document>
      <view:view mode="insert" user:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>samples/user1.xql</view:schema>
        <view:template>
          <div>
            <tpl:apply select="name,email"/>
          </div>
          <sql:trigger>
            <le:script path="samples/view3">
              <sql:result le:name="id"/>
            </le:script>
          </sql:trigger>
        </view:template>
        <view:template match="user:*">
          <tpl:register/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:load>

      $manager->setToken('/sylma/view/test/grouped/formxml-trigger-get-result-insert');
      $manager->setToken('/sylma/view/test/grouped/samples/view3');

      return
        array('post' => $manager->createArgument(array(
          'name' => 'trigger3',
          'email' => 'trigger3@sylma.org',
        )))
    </tst:load>
    <tst:expected>
      $sID = $manager->read('result');

      $user = $manager->runQuery("SELECT name, email FROM user WHERE id = $sID", 0);
      $manager->resetDB();

      $manager->assertEqual($user->query(), array(
        'name' => 'trigger3',
        'email' => 'trigger3b@sylma.org',
      ));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Simple delete">
    <tst:document>
      <view:view user:ns="ns" mode="delete">
        <sql:resource>
          <sql:id>
            <le:get-argument name="id" source="post"/>
          </sql:id>
        </sql:resource>
        <view:schema>samples/user1.xql</view:schema>
        <tpl:template/>
      </view:view>
    </tst:document>
    <tst:load>

      $manager->setToken('/sylma/view/test/grouped/formxml-simple-delete');

      $sID = $manager->runQuery("INSERT INTO user (id, name, email) VALUES (30, 'deleter01', 'deleter01@sylma.org')", 8);
      $manager->setArgument('id', $sID);

      return
        array('post' => $manager->createArgument(array(
          'id' => $sID,
        )))
    </tst:load>
    <tst:expected>
      $sID = $manager->read('id');

      $user = $manager->runQuery("SELECT * FROM user WHERE id = $sID", 2);
      $manager->assertEqual($user, false);

      return true;

    </tst:expected>
  </tst:test>
</tst:tests>