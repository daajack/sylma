<?xml version="1.0" encoding="utf-8"?>
<tst:tests
  xmlns:tst="http://www.sylma.org/modules/tester/parser"
  _xmlns="http://www.w3.org/1999/xhtml"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:view="http://2013.sylma.org/view"
  xmlns:tpl="http://2013.sylma.org/template"
  xmlns:ls="http://2013.sylma.org/parser/security"
  xmlns:le="http://2013.sylma.org/action"

  xmlns:sql="http://2013.sylma.org/storage/sql"
  xmlns:xl="http://2013.sylma.org/storage/xml"

  xmlns:user="http://2013.sylma.org/action/test/sample1"
  xmlns:group="http://2013.sylma.org/action/test/sample2"
>
  <tst:description>Basic</tst:description>
  <tst:datas name="mysql://user">
    id;name;email
    1;root;root@sylma.org
    2;admin;admin@sylma.org
    3;webmaster;webmaster@sylma.org
  </tst:datas>
  <tst:test name="Complex file">
    <tst:document>
      <view:view>
        <xl:resource/>
        <tpl:template>
          <tpl:variable name="path">/#sylma/action/test/samples/style1.css</tpl:variable>
          <span>
            <le:file>
              <tpl:read select="$path"/>
            </le:file>
          </span>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <span>/sylma/action/test/samples/style1.css</span>
    </tst:node>
  </tst:test>
  <tst:test name="Context with one file">
    <tst:node>
      <html:link href="/sylma/action/test/samples/style1.css" rel="stylesheet" type="text/css" media="all"/>
    </tst:node>
    <tst:expected>

      $context = new \sylma\modules\html\context\CSS;
      $manager->set('context', $context);

      $manager->getScript('samples/context1.vml', array(), array(
        'css' => $context,
      ));
      $manager->compareNodes($context->asDOM(), $manager->get('node'));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Context with distant file">
    <tst:document>
      <view:view>
        <xl:resource/>
        <tpl:template>
          <le:context name="js">
            <le:file>//www.example.org/_badurl</le:file>
          </le:context>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <html:script src="//www.example.org/_badurl" type="text/javascript"/>
    </tst:node>
    <tst:expected>

      $context = new \sylma\modules\html\context\JS;

      $manager->loadScript(array(), array(), array(
        'js' => $context,
      ));

      $manager->compareNodes($context->asDOM(), $manager->get('node'));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Context with two files">
    <tst:node>
      <html:link href="/sylma/action/test/samples/style1.css" rel="stylesheet" type="text/css" media="all"/>
      <html:link href="/sylma/action/test/samples/style2.css" rel="stylesheet" type="text/css" media="all"/>
    </tst:node>
    <tst:expected>

      $context = new \sylma\modules\html\context\CSS;
      $manager->set('context', $context);

      $manager->getScript('samples/context2.vml', array(), array(
        'css' => $context,
      ));

      $manager->compareNodes($context->asDOM(), $manager->get('node'));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Simple array">
    <tst:document>
      <view:view>
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <tpl:template>
          <le:context name="messages">
            <le:array>
              <le:string>hello</le:string>
              <le:string>world</le:string>
            </le:array>
          </le:context>
          <div>
            <h3><tpl:apply select="name"/></h3>
            <a href="mailto:email">test</a>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:expected>

      $context = $manager->createArgument(array());
      $manager->set('context', $context);

      $manager->loadScript(array(), array(), array(
        'messages' => $context,
      ));

      $manager->assertEqual($context->asArray(), array(array('hello', 'world')));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Array exploded">
    <tst:document>
      <view:view>
        <xl:resource/>
        <tpl:template>
          <le:context name="messages">
            <le:array explode=",">4,2,abc</le:array>
          </le:context>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:expected>

      $context = $manager->createArgument(array());
      $manager->set('context', $context);

      $manager->loadScript(array(), array(), array(
        'messages' => $context,
      ));

      $manager->assertEqual($context->asArray(), array('4', '2', 'abc'));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Call script">
    <tst:document>
      <view:view sql:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <tpl:template>
          <div>
            <h3><tpl:apply select="name"/></h3>
            <le:script path="samples/view1"/>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div><h3>admin</h3><a href="mailto:email">test</a></div>
    </tst:node>
  </tst:test>
  <tst:test name="Call script with arguments">
    <tst:document>
      <view:view sql:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <tpl:template>
          <div>
            <h3><tpl:apply select="name"/></h3>
            <le:script path="samples/view2">
              <le:string le:name="hello">world</le:string>
              <tpl:read le:name="email" select="email"/>
            </le:script>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <h3>admin</h3>
        <div>
          <h3>root</h3>world<a href="mailto:email">admin@sylma.org</a>
        </div>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Call script with mixed arguments">
    <tst:document>
      <view:view sql:ns="ns">
        <xl:resource/>
        <tpl:template>
          <div>
            <le:script path="samples/arguments_mixed/2?content=hello" mode="post">
              <tpl:read select="'webmaster'" le:name="name"/>
            </le:script>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <div>
          <h3>2</h3>
          <span>hellowebmaster</span>
        </div>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Call script hollow">
    <tst:document>
      <view:view sql:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <tpl:template>
          <div>
            <h3><tpl:apply select="name"/></h3>
            <le:script path="samples/view1" hollow="x"/>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <h3>admin</h3>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Check dynamic named argument">
    <tst:document>
      <view:view sql:ns="ns" user:ns="ns">
        <xl:resource/>
        <tpl:template>
          <le:argument source="post">
            <le:name>
              <tpl:text>arg1</tpl:text>
            </le:name>
          </le:argument>
          <div>
            <le:get-argument name="arg1" source="post"/>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:load>
      return array(
        'post' => $manager->createArgument(array(
          'arg1' => 'myarg1',
        )),
      );
    </tst:load>
    <tst:node>
      <div>myarg1</div>
    </tst:node>
  </tst:test>
  <tst:test name="Get dynamic named argument">
    <tst:document>
      <view:view sql:ns="ns" user:ns="ns">
        <xl:resource/>
        <tpl:template>
          <h3>
            <le:get-argument source="post">
              <le:name>
                <tpl:text>arg2</tpl:text>
              </le:name>
            </le:get-argument>
          </h3>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:load>
      return array(
        'post' => $manager->createArgument(array(
          'arg2' => 'myarg2',
        )),
      );
    </tst:load>
    <tst:node>
      <h3>myarg2</h3>
    </tst:node>
  </tst:test>

  <tst:test name="Get array arguments">
    <tst:document>
      <view:view sql:ns="ns" user:ns="ns">
        <sql:resource multiple="x"/>
        <sql:filter name="id" optional="x" op="in">
          <le:get-argument name="ids" format="array" source="post"/>
        </sql:filter>
        <view:schema>samples/user2.xql</view:schema>
        <tpl:template>
          <div>
            <tpl:apply select="*"/>
          </div>
        </tpl:template>
        <tpl:template match="user:user">
          <h3>
            <tpl:apply select="name"/>
          </h3>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:load>
      return array(
        'post' => $manager->createArgument(array(
          'ids' => array(1,2)
        )),
      );
    </tst:load>
    <tst:node>
      <div>
        <h3>root</h3>
        <h3>admin</h3>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Replace argument">
    <tst:document>
      <view:view sql:ns="ns" user:ns="ns">
        <xl:resource/>
        <le:argument name="id" source="post">
          <le:replace>
            <le:string>(<le:get-argument name="id" source="post"/>)</le:string>
          </le:replace>
        </le:argument>
        <tpl:template>
          <div>
            <le:get-argument name="id" source="post"/>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:load>
      return array(
        'post' => $manager->createArgument(array(
          'id' => '7',
        )),
      );
    </tst:load>
    <tst:node>
      <div>(7)</div>
    </tst:node>
  </tst:test>
  <tst:test name="Do not replace empty argument">
    <tst:document>
      <view:view sql:ns="ns" user:ns="ns">
        <xl:resource/>
        <le:argument name="id" optional="x" source="post">
          <le:replace>
            <le:string>(<le:get-argument optional="x" name="id" source="post"/>)</le:string>
          </le:replace>
        </le:argument>
        <tpl:template>
          <div>
            <span>
              <le:get-argument name="id" optional="x" source="post"/>
            </span>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <span/>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Create object">
    <tst:document>
      <view:view sql:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <tpl:template>
          <div>
            <h3><tpl:apply select="name"/></h3>
            <span>
              <le:object class="samples\Sample1">
                <tpl:text>hello</tpl:text>
                <tpl:text>world</tpl:text>
              </le:object>
            </span>
          </div>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <h3>admin</h3>
        <span>hello-world</span>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Path">
    <tst:document>
      <view:view sql:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <tpl:template>
          <span>
            <le:path>samples/view1</le:path>
          </span>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <span>/sylma/action/test/samples/view1</span>
    </tst:node>
  </tst:test>
  <tst:test name="Path with arguments">
    <tst:document>
      <view:view sql:ns="ns">
        <sql:resource>
          <sql:id>2</sql:id>
        </sql:resource>
        <view:schema>samples/user2.xql</view:schema>
        <tpl:template>
          <span>
            <le:path>samples/view1/myarg</le:path>
          </span>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <span>/sylma/action/test/samples/view1/myarg</span>
    </tst:node>
  </tst:test>
</tst:tests>