<?xml version="1.0" encoding="utf-8"?>
<tst:tests
  xmlns:tst="http://www.sylma.org/modules/tester/parser"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:crud="http://2013.sylma.org/view/crud"
  xmlns:view="http://2013.sylma.org/view"
  xmlns:tpl="http://2013.sylma.org/template"
  xmlns:stp="http://2013.sylma.org/schema/template"
  xmlns:sql="http://2013.sylma.org/storage/sql"
  xmlns:ls="http://2013.sylma.org/parser/security"
  xmlns:user="http://2013.sylma.org/view/test/sample1"
  xmlns:le="http://2013.sylma.org/action"
>
  <tst:description>Form</tst:description>
  <tst:datas name="mysql://user">
    id;name;email
    1;root;root@sylma.org
    2;admin;admin@sylma.org
    3;webmaster;webmaster@sylma.org
  </tst:datas>
  <tst:test name="Route insert">
    <tst:document>
      <crud:crud>
        <crud:route name="insert">
          <view:view mode="hollow">
            <sql:token>
              <crud:path/>
              <tpl:text>/do</tpl:text>
            </sql:token>
          </view:view>
          <view:view name="do" mode="insert"/>
        </crud:route>
        <crud:global user:ns="ns">
          <sql:resource/>
          <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
          <tpl:template>
            <form>
              <stp:apply select="name, email"/>
            </form>
          </tpl:template>
          <tpl:template match="user:*">
            <tpl:register/>
            <input type="text" name="{alias()}" value="{apply()}"/>
          </tpl:template>
        </crud:global>
      </crud:crud>
    </tst:document>
    <tst:node>
      <form>
        <input type="text" name="name" value=""/>
        <input type="text" name="email" value=""/>
      </form>
    </tst:node>
    <tst:expected>

      $view = $manager->loadScript(array(
        'arguments' => $manager->createArgument(array(
          'insert',
        )),
      ));
      $node = $manager->getArgument('node');

      $sID = $manager->loadScript(array(
        'arguments' => $manager->createArgument(array(
          'insert', 'do'
        )),
        'post' => $manager->createArgument(array(
          'name' => 'tester_crud',
          'email' => 'tester_crud@sylma.org',
        )),
      ));

      if (!is_numeric($sID)) \Sylma::throwException('Bad result');

      $user = $manager->runQuery("SELECT * FROM user WHERE id = $sID", false);
      $manager->set('id', $sID);

      return
        $manager->compareNodes($view, $node) &amp;&amp;
        $user->read('name') === 'tester_crud' &amp;&amp;
        $user->read('email') === 'tester_crud@sylma.org';
    </tst:expected>
  </tst:test>
  <tst:test name="Route update">
    <tst:document>
      <crud:crud>
        <crud:route name="update">
          <view:view mode="view">
            <sql:filter name="id"><le:get-argument name="id"/></sql:filter>
            <sql:token>
              <crud:path/>
              <tpl:text>/do</tpl:text>
            </sql:token>
          </view:view>
          <view:view name="do" mode="update">
            <sql:filter name="id"><le:get-argument name="id" source="post"/></sql:filter>
          </view:view>
        </crud:route>
        <crud:global user:ns="ns">
          <sql:resource/>
          <view:schema>/#sylma/view/test/grouped/samples/user1.xql</view:schema>
          <tpl:template>
            <form>
              <stp:apply select="name, email"/>
            </form>
          </tpl:template>
          <tpl:template match="user:*">
            <tpl:register/>
            <input type="text" name="{alias()}" value="{apply()}"/>
          </tpl:template>
        </crud:global>
      </crud:crud>
    </tst:document>
    <tst:node>
      <form>
        <input type="text" name="name" value="tester_crud"/>
        <input type="text" name="email" value="tester_crud@sylma.org"/>
      </form>
    </tst:node>
    <tst:expected>
      $sID = $manager->read('id');

      $view = $manager->loadScript(array(
        'arguments' => $manager->createArgument(array(
          'update',
          'id' => $sID,
        )),
      ));
      $node = $manager->getArgument('node');

      $manager->loadScript(array(
        'arguments' => $manager->createArgument(array(
          'update', 'do'
        )),
        'post' => $manager->createArgument(array(
          'name' => 'tester_crud2',
          'email' => 'tester_crud2@sylma.org',
          'id' => $sID,
        )),
      ));

      $user = $manager->runQuery("SELECT * FROM user WHERE id = $sID", false);
      //$manager->runQuery("DELETE FROM user WHERE id = $sID", false);

      return
        $manager->compareNodes($view, $node) &amp;&amp;
        $user->read('name') === 'tester_crud2' &amp;&amp;
        $user->read('email') === 'tester_crud2@sylma.org';
    </tst:expected>
  </tst:test>
  <tst:test name="Reference insert">
    <tst:document>
      <crud:crud>

        <crud:route name="insert">

          <view:view mode="hollow">

            <sql:token>
              <crud:path/>
              <tpl:text>/do</tpl:text>
            </sql:token>

            <tpl:template match="sql:table" mode="static">
              <block>
                <tpl:apply select="name,email"/>
              </block>
            </tpl:template>

            <tpl:template match="sql:table" mode="ref"/>

          </view:view>

          <view:view name="do" mode="insert">

            <tpl:template match="sql:table" mode="static"/>

            <tpl:template match="sql:table" mode="ref">
              <tpl:apply select="name,email"/>
            </tpl:template>

          </view:view>

        </crud:route>

        <crud:global user:ns="ns" sql:ns="ns">

          <sql:resource/>
          <view:schema>samples/group1.xql</view:schema>

          <tpl:template>
            <form>
              <tpl:apply select="name,users"/>
            </form>
          </tpl:template>
          <tpl:template match="sql:reference" sql:ns="ns">
            <fieldset>
              <tpl:apply select="static()" mode="static"/>
              <tpl:apply select="ref()" mode="ref"/>
            </fieldset>
          </tpl:template>
          <tpl:template match="*">
            <input name="{alias('form')}"/>
            <tpl:register/>
          </tpl:template>

        </crud:global>
      </crud:crud>
    </tst:document>
    <tst:node>
      <form>
        <input name="name"/>
        <fieldset>
          <block>
            <input name="users[][name]"/>
            <input name="users[][email]"/>
          </block>
        </fieldset>
      </form>
    </tst:node>
    <tst:expected>

      $view = $manager->loadScript(array(
        'arguments' => $manager->createArgument(array(
          'insert',
        )),
      ));
      $node = $manager->getArgument('node');

      $aUsers = array(
        array(
          'name' => 'test_ref1',
          'email' => 'test_ref1@sylma.org',
        ),
        array(
          'name' => 'test_ref2',
          'email' => 'test_ref2@sylma.org',
        ),
      );

      $sID = $manager->loadScript(array(
        'arguments' => $manager->createArgument(array(
          'insert', 'do'
        )),
        'post' => $manager->createArgument(array(
          'name' => 'group_crud',
          'users' => $aUsers,
        )),
      ));

      if (!is_numeric($sID)) \Sylma::throwException('Bad result');

      $group = $manager->runQuery("SELECT name FROM `group` WHERE id = $sID", false);
      $users = $manager->runQuery("SELECT name,email FROM user2 WHERE `group_id` = $sID", true);
      $manager->set('idref', $sID);

      $manager->compareNodes($view, $node);

      $manager->assertEquals($group->read('name'), 'group_crud');
      $manager->assertEquals($users->query(), $aUsers);

      return true;

    </tst:expected>
  </tst:test>
  <tst:test name="Reference update">
    <tst:document>
      <crud:crud>

        <crud:route name="update">

          <view:view mode="view">

            <sql:filter name="id">
              <le:get-argument name="id"/>
            </sql:filter>

            <sql:token>
              <crud:path/>
              <tpl:text>/do</tpl:text>
            </sql:token>

            <tpl:template match="sql:table" mode="static"/>

            <tpl:template match="sql:table" mode="ref">
              <tpl:apply/>
            </tpl:template>

            <tpl:template match="sql:table">
              <block>
                <tpl:apply select="name,email"/>
              </block>
            </tpl:template>

          </view:view>

          <view:view name="do" mode="update">

            <sql:filter name="id"><le:get-argument name="id" source="post"/></sql:filter>
            <tpl:template match="sql:table" mode="static"/>

          </view:view>

        </crud:route>

        <crud:global user:ns="ns">

          <sql:resource/>
          <view:schema>samples/group1.xql</view:schema>

          <tpl:template>
            <form>
              <tpl:apply select="name,users"/>
            </form>
          </tpl:template>
          <tpl:template match="sql:reference" sql:ns="ns">
            <fieldset>
              <tpl:apply select="static()" mode="static"/>
              <div>
                <tpl:apply select="ref()" mode="ref"/>
              </div>
            </fieldset>
          </tpl:template>
          <tpl:template match="*">
            <input name="{alias('form')}" value="{value()}"/>
            <tpl:register/>
          </tpl:template>

          <tpl:template match="sql:table" mode="ref">
            <tpl:apply select="name,email"/>
          </tpl:template>

        </crud:global>
      </crud:crud>
    </tst:document>
    <tst:node>
      <form>
        <input name="name" value="group_crud"/>
        <fieldset>
          <div>
            <block>
              <input name="users[0][name]" value="test_ref1"/>
              <input name="users[0][email]" value="test_ref1@sylma.org"/>
            </block>
            <block>
              <input name="users[1][name]" value="test_ref2"/>
              <input name="users[1][email]" value="test_ref2@sylma.org"/>
            </block>
          </div>
        </fieldset>
      </form>
    </tst:node>
    <tst:expected>

      $sID = $manager->read('idref');

      $view = $manager->loadScript(array(
        'arguments' => $manager->createArgument(array(
          'update',
          'id' => $sID,
        )),
      ));

      $node = $manager->getArgument('node');

      $aUsers = array(
        array(
          'name' => 'test_ref1b',
          'email' => 'test_ref1b@sylma.org',
        ),
        array(
          'name' => 'test_ref2b',
          'email' => 'test_ref2b@sylma.org',
        ),
      );

      $manager->loadScript(array(
        'arguments' => $manager->createArgument(array(
          'update', 'do'
        )),
        'post' => $manager->createArgument(array(
          'id' => $sID,
          'name' => 'group_crud_new',
          'users' => $aUsers,
        )),
      ));

      if (!is_numeric($sID)) \Sylma::throwException('Bad result');

      $group = $manager->runQuery("SELECT name FROM `group` WHERE id = $sID", false);
      $users = $manager->runQuery("SELECT name,email FROM user2 WHERE `group_id` = $sID", true);

      $manager->compareNodes($view, $node);

      $manager->assertEquals($group->read('name'), 'group_crud_new');
      $manager->assertEquals($users->query(), $aUsers);

      return true;

    </tst:expected>
  </tst:test>
  <tst:test name="Reference update with ids">
    <tst:document>
      <crud:crud>

        <crud:route name="update">

          <view:view mode="view">

            <sql:filter name="id">
              <le:get-argument name="id"/>
            </sql:filter>

            <sql:token>
              <crud:path/>
              <tpl:text>/do</tpl:text>
            </sql:token>

            <tpl:template match="sql:table" mode="static"/>

            <tpl:template match="sql:table" mode="ref">
              <tpl:apply/>
            </tpl:template>

            <tpl:template match="sql:table">
              <block>
                <tpl:apply select="id,name,email"/>
              </block>
            </tpl:template>

          </view:view>

          <view:view name="do" mode="update">

            <sql:filter name="id"><le:get-argument name="id" source="post"/></sql:filter>
            <tpl:template match="sql:table" mode="static"/>

          </view:view>

        </crud:route>

        <crud:global user:ns="ns">

          <sql:resource/>
          <view:schema>samples/group2.xql</view:schema>

          <tpl:template>
            <form>
              <tpl:apply select="name,users"/>
            </form>
          </tpl:template>
          <tpl:template match="sql:reference" sql:ns="ns">
            <fieldset>
              <tpl:apply select="static()" mode="static"/>
              <div>
                <tpl:apply select="ref()" mode="ref"/>
              </div>
            </fieldset>
          </tpl:template>
          <tpl:template match="*">
            <input name="{alias('form')}" value="{value()}"/>
            <tpl:register/>
          </tpl:template>

          <tpl:template match="sql:table" mode="ref">
            <tpl:apply select="id,name,email"/>
          </tpl:template>

        </crud:global>
      </crud:crud>
    </tst:document>
    <tst:node>
      <form>
        <input name="name" value="group_crud_new"/>
        <fieldset>
          <div>
            <block>
              <input name="users[0][id]" value="7"/>
              <input name="users[0][name]" value="test_ref1b"/>
              <input name="users[0][email]" value="test_ref1b@sylma.org"/>
            </block>
            <block>
              <input name="users[1][id]" value="8"/>
              <input name="users[1][name]" value="test_ref2b"/>
              <input name="users[1][email]" value="test_ref2b@sylma.org"/>
            </block>
          </div>
        </fieldset>
      </form>
    </tst:node>
    <tst:expected>

      $sID = $manager->read('idref');

      $view = $manager->loadScript(array(
        'arguments' => $manager->createArgument(array(
          'update',
          'id' => $sID,
        )),
      ));

      $node = $manager->getArgument('node');

      $users = $manager->runQuery("SELECT name,email FROM user2 WHERE `group_id` = $sID", true);

      $aUsers = array(
        array(
          'id' => -7,
        ),
        array(
          'id' => '8',
          'name' => 'test_ref2c',
          'email' => 'test_ref2c@sylma.org',
        ),
      );

      $manager->loadScript(array(
        'arguments' => $manager->createArgument(array(
          'update', 'do'
        )),
        'post' => $manager->createArgument(array(
          'id' => $sID,
          'name' => 'group_crud_new',
          'users' => $aUsers,
        )),
      ));

      if (!is_numeric($sID)) \Sylma::throwException('Bad result');

      $group = $manager->runQuery("SELECT name FROM `group` WHERE id = $sID", false);
      $users = $manager->runQuery("SELECT id,name,email FROM user2 WHERE `group_id` = $sID", true);

      $manager->compareNodes($view, $node);

      array_shift($aUsers);

      $manager->assertEquals($group->read('name'), 'group_crud_new');
      $manager->assertEquals($users->query(), $aUsers);

      return true;

    </tst:expected>
  </tst:test>
</tst:tests>