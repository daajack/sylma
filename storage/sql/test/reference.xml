<?xml version="1.0" encoding="utf-8"?>
<tst:tests
  xmlns:tst="http://www.sylma.org/modules/tester/parser"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:view="http://2013.sylma.org/view"
  xmlns:crud="http://2013.sylma.org/view/crud"
  xmlns:tpl="http://2013.sylma.org/template"
  xmlns:stp="http://2013.sylma.org/schema/template"
  xmlns:sql="http://2013.sylma.org/storage/sql"
  xmlns:ls="http://2013.sylma.org/parser/security"
  xmlns:le="http://2013.sylma.org/action"

  xmlns:user="http://2013.sylma.org/view/test/sample1"
  xmlns:group="http://2013.sylma.org/view/test/sample2"
>
  <tst:description>Reference</tst:description>
  <tst:test name="Simple reference">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource>
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/group2.xql</view:schema>
        <view:template>
          <div>
            <h3><stp:apply select="name"/></h3>
            <ul>
              <tpl:apply select="users/ref()"/>
            </ul>
          </div>
        </view:template>
        <view:template match="user:user2">
          <li><tpl:read select="name"/></li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <h3>group01</h3>
        <ul>
          <li>admin</li>
          <li>user1</li>
        </ul>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Join">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource multiple="x">
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/group2.xql</view:schema>
        <tpl:template>
          <div>
            <tpl:apply select="*"/>
          </div>
        </tpl:template>
        <view:template match="group:group">
          <h2><tpl:read select="name"/></h2>
          <tpl:apply select="users/join()"/>
        </view:template>
        <view:template match="user:user2">
          <li><tpl:read select="name"/></li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <h2>group01</h2>
        <li>admin</li>
        <h2>group01</h2>
        <li>user1</li>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Simple filter">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource>
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/group2.xql</view:schema>
        <view:template>
          <div>
            <h3><stp:apply select="name"/></h3>
            <ul>
              <tpl:apply select="users/ref()"/>
            </ul>
          </div>
        </view:template>
        <view:template match="user:user2">
          <sql:filter name="name">admin</sql:filter>
          <li><tpl:read select="name"/></li>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <h3>group01</h3>
        <ul>
          <li>admin</li>
        </ul>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="View form">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource>
          <sql:id>1</sql:id>
        </sql:resource>
        <view:schema>samples/group2.xql</view:schema>
        <view:template>
          <div>
            <tpl:apply select="name,users"/>
          </div>
        </view:template>
        <view:template match="user:user2">
          <tpl:apply select="name"/>
        </view:template>
        <view:template match="sql:reference" sql:ns="ns">
          <fieldset>
            <tpl:apply select="ref()"/>
          </fieldset>
        </view:template>
        <view:template match="*">
          <input name="{alias('form')}" value="{value()}"/>
          <tpl:register/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <input name="name" value="group01"/>
        <fieldset>
          <input name="users[0][name]" value="admin"/>
          <input name="users[1][name]" value="user1"/>
        </fieldset>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Form alias">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource>
          <sql:id>3</sql:id>
        </sql:resource>
        <view:schema>samples/group2.xql</view:schema>
        <view:template>
          <div>
            <tpl:apply select="name,users"/>
          </div>
        </view:template>
        <view:template match="user:user2">
          <tpl:apply select="name"/>
        </view:template>
        <view:template match="sql:reference" sql:ns="ns">
          <fieldset>
            <tpl:apply select="static()"/>
          </fieldset>
        </view:template>
        <view:template match="*">
          <input name="{alias('form')}"/>
          <tpl:register/>
        </view:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <input name="name"/>
        <fieldset>
          <input name="users[0][name]"/>
        </fieldset>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Form insert">
    <tst:document>

      <view:view mode="insert">

        <sql:resource/>
        <view:schema>samples/group1.xql</view:schema>

        <tpl:template>
          <form>
            <tpl:apply select="name,users"/>
          </form>
        </tpl:template>

        <tpl:template match="sql:reference" sql:ns="ns">
          <fieldset>
            <tpl:apply select="ref()" mode="ref"/>
          </fieldset>
        </tpl:template>

        <tpl:template match="*">
          <input name="{alias('form')}"/>
          <tpl:register/>
        </tpl:template>

        <tpl:template match="sql:table" mode="ref">
          <tpl:apply select="name,email"/>
        </tpl:template>

      </view:view>
    </tst:document>
    <tst:load>

      $aUsers = array(
        array(
          'name' => 'test_ref1',
          'email' => 'test_ref1@sylma.org',
        ),
        array(
          'name' => 'test_ref2',
          'email' => 'test_ref2@sylma.org',
        ),
      );

      $manager->set('users', $aUsers);

      return array(
        'post' => $manager->createArgument(array(
          'name' => 'group_crud',
          'users' => $aUsers,
        )),
      );
    </tst:load>
    <tst:expected>

      $sID = $manager->read('result');
      $aUsers = $manager->get('users')->asArray();

      if (!is_numeric($sID)) \Sylma::throwException('Bad result');

      $group = $manager->runQuery("SELECT name FROM `group` WHERE id = $sID", false);
      $users = $manager->runQuery("SELECT name,email FROM user2 WHERE `group_id` = $sID", true);
      $manager->set('idref', $sID);

      $manager->assertEquals($group->read('name'), 'group_crud');
      $manager->assertEquals($users->query(), $aUsers);

      return true;

    </tst:expected>
  </tst:test>
  <tst:test name="Form update">
    <tst:dependancy>Form insert (prev)</tst:dependancy>
    <tst:document>

      <view:view mode="update">

        <sql:resource/>
        <view:schema>samples/group1.xql</view:schema>

        <tpl:template>
          <form>
            <tpl:apply select="name,users"/>
          </form>
        </tpl:template>
        <tpl:template match="sql:reference" sql:ns="ns">
          <fieldset>
            <div>
              <tpl:apply select="ref()" mode="ref"/>
            </div>
          </fieldset>
        </tpl:template>
        <tpl:template match="*">
          <input name="{alias('form')}" value="{value()}"/>
          <tpl:register/>
        </tpl:template>

        <tpl:template match="sql:table" mode="ref">
          <tpl:apply select="name,email"/>
        </tpl:template>

        <sql:filter name="id"><le:get-argument name="id" source="post"/></sql:filter>

      </view:view>
    </tst:document>
    <tst:load>

      $sID = $manager->read('idref');

      $aUsers = array(
        array(
          'name' => 'test_ref1b',
          'email' => 'test_ref1b@sylma.org',
        ),
        array(
          'name' => 'test_ref2b',
          'email' => 'test_ref2b@sylma.org',
        ),
      );

      $manager->set('users', $aUsers);

      return array(
        'post' => $manager->createArgument(array(
          'id' => $sID,
          'name' => 'group_crud_new',
          'users' => $aUsers,
        )),
      );
    </tst:load>
    <tst:expected>

      $sID = $manager->read('idref');
      $aUsers = $manager->get('users')->asArray();

      if (!is_numeric($sID)) \Sylma::throwException('Bad result');

      $group = $manager->runQuery("SELECT name FROM `group` WHERE id = $sID", false);
      $users = $manager->runQuery("SELECT name,email FROM user2 WHERE `group_id` = $sID", true);

      $manager->assertEquals($group->read('name'), 'group_crud_new');
      $manager->assertEquals($users->query(), $aUsers);

      return true;

    </tst:expected>
  </tst:test>
  <tst:test name="Form update with ids">
    <tst:dependancy>Form update (prev)</tst:dependancy>
    <tst:document>

      <view:view mode="update">

        <sql:resource/>
        <view:schema>samples/group2b.xql</view:schema>

        <tpl:template>
          <form>
            <tpl:apply select="name,users"/>
          </form>
        </tpl:template>
        <tpl:template match="sql:reference" sql:ns="ns">
          <fieldset>
            <div>
              <tpl:apply select="ref()" mode="ref"/>
            </div>
          </fieldset>
        </tpl:template>
        <tpl:template match="*">
          <input name="{alias('form')}" value="{value()}"/>
          <tpl:register/>
        </tpl:template>

        <tpl:template match="sql:table" mode="ref">
          <tpl:apply select="id,name,email"/>
        </tpl:template>

        <sql:filter name="id"><le:get-argument name="id" source="post"/></sql:filter>

      </view:view>
    </tst:document>
    <tst:load>

      $sID = $manager->read('idref');

      $aUsers = array(
        array(
          'id' => -7,
        ),
        array(
          'id' => '8',
          'name' => 'test_ref2c',
          'email' => 'test_ref2c@sylma.org',
        ),
      );

      $manager->set('users', $aUsers);

      return array(
        'post' => $manager->createArgument(array(
          'id' => $sID,
          'name' => 'group_crud_new',
          'users' => $aUsers,
        )),
      );
    </tst:load>
    <tst:expected>

      $sID = $manager->read('idref');
      $aUsers = $manager->get('users')->asArray();

      if (!is_numeric($sID)) \Sylma::throwException('Bad result');

      $group = $manager->runQuery("SELECT name FROM `group` WHERE id = $sID", false);
      $users = $manager->runQuery("SELECT id,name,email FROM user2 WHERE `group_id` = $sID", true);

      array_shift($aUsers);

      $manager->assertEquals($group->read('name'), 'group_crud_new');
      $manager->assertEquals($users->query(), $aUsers);

      return true;

    </tst:expected>
  </tst:test>
</tst:tests>