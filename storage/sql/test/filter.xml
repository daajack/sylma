<?xml version="1.0" encoding="utf-8"?>
<tst:tests
  xmlns:tst="http://www.sylma.org/modules/tester/parser"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:view="http://2013.sylma.org/view"
  xmlns:tpl="http://2013.sylma.org/template"
  xmlns:sql="http://2013.sylma.org/storage/sql"
  xmlns:ls="http://2013.sylma.org/parser/security"
  xmlns:le="http://2013.sylma.org/action"

  xmlns:user="http://2013.sylma.org/view/test/sample1"
  xmlns:group="http://2013.sylma.org/view/test/sample2"
>
  <tst:description>Filter</tst:description>
  <tst:datas name="mysql://user">
    id;name;email
    1;root;root@sylma.org
    2;admin;admin@sylma.org
    3;webmaster;webmaster@sylma.org
  </tst:datas>
  <tst:datas name="mysql://user2">
    id;name;email;date-update
    1;root;root@sylma.org;1;2010-10-01-00:00:00
    2;admin;admin@sylma.org;2;2030-06-02-00:00:00
    3;webmaster;webmaster@sylma.org;0;2010-12-05-00:00:00
    4;user1;user1@sylma.org;1;2035-01-18-00:00:00
  </tst:datas>
  <tst:test name="Simple filter">
    <tst:prepare>

      $manager->getScript('/#sylma/storage/sql/alter/index.vml', array(
        'file' => '/#sylma/storage/sql/test/samples/user1.xql',
      ));

    </tst:prepare>

    <tst:document>
      <view:view user:ns="ns">
        <sql:resource/>
        <view:schema>samples/user1.xql</view:schema>
        <sql:filter name="id">2</sql:filter>
        <tpl:template>
          <h2><tpl:apply select="name"/></h2>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <h2>admin</h2>
    </tst:node>
  </tst:test>
  <tst:test name="Current tree">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource/>
        <view:schema>samples/user1.xql</view:schema>
        <tpl:template>
          <h2><tpl:apply select="name"/></h2>
        </tpl:template>
        <tpl:template match="user:name">
          <sql:filter>admin</sql:filter>
          <tpl:read/>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <h2>admin</h2>
    </tst:node>
  </tst:test>
  <tst:test name="Filter with @op">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource/>
        <sql:filter name="name" op="NOT LIKE">%m%</sql:filter>
        <view:schema>samples/user6.xql</view:schema>
        <tpl:template>
          <h2><tpl:apply select="name"/></h2>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <h2>root</h2>
    </tst:node>
  </tst:test>
  <tst:test name="Search @op">
    <tst:prepare>

      $manager->runQuery('DROP TABLE IF EXISTS user1e', 2);

      $manager->getScript('/#sylma/storage/sql/alter/index.vml', array(
        'file' => '/#sylma/storage/sql/test/samples/user1e.xql',
      ));

      $manager->resetDB();

    </tst:prepare>

    <tst:document>
      <view:view user:ns="ns">
        <sql:resource multiple="x"/>
        <view:schema>samples/user1e.xql</view:schema>
        <sql:filter name="name" optional="x" op="search">
          <tpl:text>alp</tpl:text>
        </sql:filter>
        <tpl:template>
          <ul>
            <tpl:apply select="*"/>
          </ul>
        </tpl:template>
        <tpl:template match="*">
          <li>
            <tpl:read select="name"/>
          </li>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <ul>
        <li>alpha</li>
        <li>Alpha2</li>
      </ul>
    </tst:node>
  </tst:test>
  <tst:test name="Filter search on latin1">
    <tst:prepare>

      $manager->runQuery('DROP TABLE IF EXISTS latin01', 2);

      \sylma\storage\sql\alter\Handler::reset();
      $manager->getScript('/#sylma/storage/sql/alter/index.vml', array(
        'file' => '/#sylma/storage/sql/test/samples/latin01.xql',
      ));

      $manager->runQuery("INSERT INTO latin01 (id, name, email) VALUES (1, 'Alexandra Glover', 'none')", 8);

    </tst:prepare>

    <tst:document>
      <view:view user:ns="ns">
        <sql:resource multiple="x"/>
        <view:schema>samples/latin01.xql</view:schema>
        <sql:filter name="name" optional="x" op="search">
          <tpl:text>ale</tpl:text>
        </sql:filter>
        <tpl:template>
          <ul>
            <tpl:apply select="*"/>
          </ul>
        </tpl:template>
        <tpl:template match="*">
          <li>
            <tpl:read select="name"/>
          </li>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <ul>
        <li>Alexandra Glover</li>
      </ul>
    </tst:node>
  </tst:test>
  <tst:test name="Filter with @op in" disabled="true">
    <!-- works but mysql throw exception -->
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource multiple="x"/>
        <sql:filter name="id" op="in">
          <le:get-argument name="ids" optional="x" source="post" format="array"/>
        </sql:filter>
        <view:schema>samples/user6.xql</view:schema>
        <tpl:template>
          <div><tpl:apply select="*"/></div>
        </tpl:template>
        <tpl:template match="user:user2">
          <h2><tpl:apply select="name"/></h2>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div/>
    </tst:node>
    <tst:node>
      <div>
        <h2>root</h2>
        <h2>admin</h2>
      </div>
    </tst:node>
    <tst:expected>

      $nodes = $manager->getArgument('node');

      $result1 = $manager->loadScript();
      $result2 = $manager->loadScript(array(), array(
        'ids' => array(1,2),
      ));

      $manager->compareNodes($result1, $nodes->get('node1'));
      $manager->compareNodes($result2, $nodes->get('node2'));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Filter with function">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource multiple="x"/>
        <sql:filter name="date-update" op="&lt;" function="x">now()</sql:filter>
        <view:schema>samples/user6.xql</view:schema>
        <tpl:template>
          <div><tpl:apply select="*"/></div>
        </tpl:template>
        <tpl:template match="user:user2">
          <h2><tpl:apply select="name"/></h2>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <h2>root</h2>
        <h2>webmaster</h2>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Filter foreigner">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource/>
        <sql:filter name="id"><le:get-argument name="id"/></sql:filter>
        <view:schema>samples/user1.xql</view:schema>
        <tpl:template>
          <h2><tpl:apply select="name"/></h2>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:load>
      return array('arguments' => $manager->createArgument(array('id' => 2)));
    </tst:load>
    <tst:node>
      <h2>admin</h2>
    </tst:node>
  </tst:test>
  <tst:test name="Filter with post" disabled="true">
    <tst:document>
      <view:view user:ns="ns" mode="insert">
        <sql:resource/>
        <sql:filter name="id"><le:get-argument source="post" name="id"/></sql:filter>
        <view:schema>samples/user1.xql</view:schema>
        <tpl:template>
          <h2><tpl:apply select="name"/></h2>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:load>
      return array('post' => $manager->createArgument(array('id' => 2)));
    </tst:load>
    <tst:node>
      <h2>admin</h2>
    </tst:node>
  </tst:test>
  <tst:test name="Dynamic filter">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource multiple="multiple"/>
        <sql:filter name="id" optional="x"><le:get-argument name="id" optional="x"/></sql:filter>
        <view:schema>samples/user1.xql</view:schema>
        <tpl:template>
          <div>
            <tpl:apply select="*"/>
          </div>
        </tpl:template>
        <tpl:template match="user:user">
          <h2>
            <tpl:apply select="name"/>
          </h2>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node name="node1">
      <div>
        <h2>root</h2>
        <h2>admin</h2>
        <h2>webmaster</h2>
      </div>
    </tst:node>
    <tst:node name="node2">
      <div>
        <h2>admin</h2>
      </div>
    </tst:node>
    <tst:expected>

      $nodes = $manager->getArgument('node');

      $result1 = $manager->loadScript();
      $result2 = $manager->loadScript(array(
        'id' => '2',
      ));

      $manager->compareNodes($result1, $nodes->get('node1'));
      $manager->compareNodes($result2, $nodes->get('node2'));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Filter on multiple foreign">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource multiple="multiple"/>
        <view:schema>samples/user4.xql</view:schema>
        <tpl:template>
          <div>
            <tpl:apply select="*"/>
          </div>
        </tpl:template>
        <tpl:template match="user:user">
          <sql:distinct name="id"/>
          <h2>
            <tpl:apply select="name"/>
            <tpl:apply select="group/join()"/>
          </h2>
        </tpl:template>
        <tpl:template match="group:group">
          <sql:filter name="id" op="in">
            <le:array>
              <tpl:text>1</tpl:text>
              <tpl:text>2</tpl:text>
            </le:array>
          </sql:filter>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div>
        <h2>root</h2>
        <h2>admin</h2>
      </div>
    </tst:node>
  </tst:test>
  <tst:test name="Dynamic filter on multiple foreign">
    <tst:document>
      <view:view user:ns="ns" group:ns="ns">
        <sql:resource multiple="multiple"/>
        <view:schema>samples/user4.xql</view:schema>
        <tpl:template>
          <div>
            <tpl:apply select="*"/>
          </div>
        </tpl:template>
        <tpl:template match="user:user">
          <sql:distinct name="id"/>
          <h2>
            <tpl:apply select="name"/>
            <tpl:apply select="group/join()"/>
          </h2>
        </tpl:template>
        <tpl:template match="group:group">
          <sql:filter name="id" op="in" optional="x">
            <le:get-argument name="id" optional="x" format="array"/>
          </sql:filter>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node name="node1">
      <div>
        <h2>root</h2>
        <h2>admin</h2>
        <h2>webmaster</h2>
      </div>
    </tst:node>
    <tst:node name="node2">
      <div>
        <h2>root</h2>
        <h2>admin</h2>
      </div>
    </tst:node>
    <tst:expected>

      $nodes = $manager->getArgument('node');

      $result1 = $manager->loadScript();
      $result2 = $manager->loadScript(array(
        'id' => array(1, 2),
      ));

      $manager->compareNodes($result1, $nodes->get('node1'));
      $manager->compareNodes($result2, $nodes->get('node2'));

      return true;
    </tst:expected>
  </tst:test>
  <tst:test name="Dynamic filter with default">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource multiple="multiple"/>
        <sql:filter name="id" optional="x" default="0"><le:get-argument name="id" optional="x"/></sql:filter>
        <view:schema>samples/user1.xql</view:schema>
        <tpl:template>
          <div>
            <tpl:apply select="*"/>
          </div>
        </tpl:template>
        <tpl:template match="user:user">
          <h2>
            <tpl:apply select="name"/>
          </h2>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div/>
    </tst:node>
  </tst:test>
  <tst:test name="Dynamic IN filter with default">
    <tst:document>
      <view:view user:ns="ns">
        <sql:resource multiple="multiple"/>
        <sql:filter name="id" optional="x" op="in" default="0">
          <le:get-argument name="ids" optional="x" format="array"/>
        </sql:filter>
        <view:schema>samples/user1.xql</view:schema>
        <tpl:template>
          <div>
            <tpl:apply select="*"/>
          </div>
        </tpl:template>
        <tpl:template match="user:user">
          <h2>
            <tpl:apply select="name"/>
          </h2>
        </tpl:template>
      </view:view>
    </tst:document>
    <tst:node>
      <div/>
    </tst:node>
  </tst:test>
</tst:tests>